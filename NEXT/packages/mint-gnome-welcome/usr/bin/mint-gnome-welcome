#!/usr/bin/python3
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
from os import system, getenv
from os.path import exists



dashtopanel  = "dash-to-panel@jderose9.github.com"
dashtodock   = "dash-to-dock@micxgx.gmail.com"
desktopicons = "ding@rastersoft.com"

theme_gtk_light    = "Adwaita"
theme_gtk_dark     = "Adwaita-dark"
theme_kv_light     = "KvGnome"
theme_kv_dark      = "KvGnomeDark"
theme_icons_light  = "Mint-Y"
theme_icons_dark   = "Mint-Y-Dark"
theme_icons_colors = ["-Grey", "-Brown", "-Sand", "", "-Teal", "-Aqua", "-Blue", "-Purple", "-Pink", "-Red", "-Orange", "-Yellow"]



class WelcomeWindow(Gtk.Window):
	def __init__(self):

		self.style = style
		self.icons = icons
		self.dark  = dark
		self.color = color

		Gtk.Window.__init__(self, title = "Welcome")
		self.set_icon_name("mintwelcome")
		self.set_position(Gtk.WindowPosition.CENTER)
		self.set_resizable(False)
		self.set_border_width(32)
		self.stack = Gtk.Stack(transition_type = Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
		self.add(self.stack)
		self.box1 = Gtk.Box(spacing = 32, orientation = Gtk.Orientation.VERTICAL)
		self.box2 = Gtk.Box(spacing = 32, orientation = Gtk.Orientation.VERTICAL)
		self.box3 = Gtk.Box(spacing = 32, orientation = Gtk.Orientation.VERTICAL)
		self.stack.add_named(self.box1, "1")
		self.stack.add_named(self.box2, "2")
		self.stack.add_named(self.box3, "3")

		self.header = Gtk.HeaderBar()
		self.header.set_title(locale[0])
		self.button_back = Gtk.Button(label = locale[1])
		self.button_back.connect("clicked", self.action_back)
		self.header.pack_start(self.button_back)
		self.button_next = Gtk.Button(label = locale[2])
		self.button_next.get_style_context().add_class("suggested-action")
		self.button_next.connect("clicked", self.action_next)
		self.header.pack_end(self.button_next)
		self.set_titlebar(self.header)

		#PAGE1
		self.box_styles = Gtk.Box(spacing = 32)
		self.box1.pack_start(self.box_styles, True, False, 0)

		self.image_panel = Gtk.Image()
		self.image_panel.set_from_file("/usr/share/mint-gnome-welcome/panel.png")
		self.button_panel = Gtk.Button(label = "\n" + locale[5])
		self.button_panel.set_always_show_image(True)
		self.button_panel.set_image(self.image_panel)
		self.button_panel.set_image_position(Gtk.PositionType.TOP)
		if self.style == "panel":
			self.button_panel.get_style_context().add_class("suggested-action")
		self.button_panel.connect("clicked", self.action_panel)
		self.box_styles.pack_start(self.button_panel, True, True, 0)

		self.image_dock = Gtk.Image()
		self.image_dock.set_from_file("/usr/share/mint-gnome-welcome/dock.png")
		self.button_dock = Gtk.Button(label = "\n" + locale[6])
		self.button_dock.set_always_show_image(True)
		self.button_dock.set_image(self.image_dock)
		self.button_dock.set_image_position(Gtk.PositionType.TOP)
		if self.style == "dock":
			self.button_dock.get_style_context().add_class("suggested-action")
		self.button_dock.connect("clicked", self.action_dock)
		self.box_styles.pack_start(self.button_dock, True, True, 0)

		self.image_dash = Gtk.Image()
		self.image_dash.set_from_file("/usr/share/mint-gnome-welcome/dash.png")
		self.button_dash = Gtk.Button(label = "\n" + locale[7])
		self.button_dash.set_always_show_image(True)
		self.button_dash.set_image(self.image_dash)
		self.button_dash.set_image_position(Gtk.PositionType.TOP)
		if self.style == "dash":
			self.button_dash.get_style_context().add_class("suggested-action")
		self.button_dash.connect("clicked", self.action_dash)
		self.box_styles.pack_start(self.button_dash, True, True, 0)

		#PAGE2
		self.box_desktop = Gtk.Box(spacing = 8)
		self.box2.pack_start(self.box_desktop, True, False, 0)
		self.box_theme = Gtk.Box(spacing = 8)
		self.box2.pack_start(self.box_theme, True, False, 0)
		self.box_colors = Gtk.Box(spacing = 8)
		self.box2.pack_start(self.box_colors, True, False, 0)

		self.text_hide = Gtk.Label(label = locale[9])
		self.text_hide.set_xalign(1)
		self.box_desktop.pack_start(self.text_hide, True, True, 0)
		self.switch_desktop = Gtk.Switch()
		self.switch_desktop.set_state(self.icons)
		self.switch_desktop.connect("state_set", self.action_desktop)
		self.box_desktop.set_center_widget(self.switch_desktop)
		self.text_show = Gtk.Label(label = locale[10])
		self.text_show.set_xalign(0)
		self.box_desktop.pack_end(self.text_show, True, True, 0)

		self.text_light = Gtk.Label(label = locale[11])
		self.text_light.set_xalign(1)
		self.box_theme.pack_start(self.text_light, True, True, 0)
		self.switch_theme = Gtk.Switch()
		self.switch_theme.set_state(self.dark)
		self.switch_theme.connect("state_set", self.action_theme)
		self.box_theme.set_center_widget(self.switch_theme)
		self.text_dark = Gtk.Label(label = locale[12])
		self.text_dark.set_xalign(0)
		self.box_theme.pack_end(self.text_dark, True, True, 0)

		self.button_colors = Gtk.ButtonBox(layout_style = Gtk.ButtonBoxStyle.EXPAND)
		self.list_colors = []
		for theme in theme_icons_colors:
			button = Gtk.Button(image = Gtk.Image(file = "/usr/share/icons/Mint-Y" + theme + "/places/48/folder.png"))
			self.button_colors.pack_start(button, False, False, 0)
			if theme == self.color:
				button.get_style_context().add_class("suggested-action")
			button.connect("clicked", self.action_color, theme)
			self.list_colors.append(button)
		self.box_colors.pack_start(self.button_colors, True, False, 0)

		#PAGE3
		self.text_header = Gtk.Label(label = "<big><b>" + locale[13] + "</b></big>", use_markup = True, justify = Gtk.Justification.CENTER)
		self.box3.pack_start(self.text_header, True, False, 0)
		self.box_launch = Gtk.Box(spacing = 8)
		self.box3.pack_start(self.box_launch, True, False, 0)

		self.image_face = Gtk.Image()
		self.image_face.set_from_file("/usr/share/icons/Mint-Y/apps/64@2x/preferences-desktop-user.png")
		self.button_face = Gtk.Button(label = "\n" + locale[14])
		self.button_face.set_always_show_image(True)
		self.button_face.set_image(self.image_face)
		self.button_face.set_image_position(Gtk.PositionType.TOP)
		self.button_face.connect("clicked", self.action_launch, "gnome-control-center user-accounts")
		self.box_launch.pack_start(self.button_face, True, False, 0)

		self.image_wall = Gtk.Image()
		self.image_wall.set_from_file("/usr/share/icons/Mint-Y/apps/64@2x/preferences-desktop-wallpaper.png")
		self.button_wall = Gtk.Button(label = "\n" + locale[15])
		self.button_wall.set_always_show_image(True)
		self.button_wall.set_image(self.image_wall)
		self.button_wall.set_image_position(Gtk.PositionType.TOP)
		self.button_wall.connect("clicked", self.action_launch, "gnome-control-center background")
		self.box_launch.pack_start(self.button_wall, True, False, 0)

		self.image_soft = Gtk.Image()
		self.image_soft.set_from_file("/usr/share/icons/Mint-Y/apps/64@2x/mintinstall.png")
		self.button_soft = Gtk.Button(label = "\n" + locale[16])
		self.button_soft.set_always_show_image(True)
		self.button_soft.set_image(self.image_soft)
		self.button_soft.set_image_position(Gtk.PositionType.TOP)
		self.button_soft.connect("clicked", self.action_launch, "mintinstall")
		self.box_launch.pack_start(self.button_soft, True, False, 0)

		self.image_drvr = Gtk.Image()
		self.image_drvr.set_from_file("/usr/share/icons/Mint-Y/apps/64@2x/mintdrivers.png")
		self.button_drvr = Gtk.Button(label = "\n" + locale[17])
		self.button_drvr.set_always_show_image(True)
		self.button_drvr.set_image(self.image_drvr)
		self.button_drvr.set_image_position(Gtk.PositionType.TOP)
		self.button_drvr.connect("clicked", self.action_launch, "pkexec driver-manager")
		self.box_launch.pack_start(self.button_drvr, True, False, 0)


	def action_back(self, widget):
		page = int(self.stack.get_visible_child_name())
		if page > 1:
			page -= 1
			self.stack.set_visible_child_name(str(page))
			self.button_back.set_label(locale[3])
			self.button_next.set_label(locale[2])
			if page == 1:
				self.button_back.set_label(locale[1])
		else:
			Gtk.main_quit()

	def action_next(self, widget):
		page = int(self.stack.get_visible_child_name())
		if page < 3:
			page += 1
			self.stack.set_visible_child_name(str(page))
			self.button_back.set_label(locale[3])
			self.button_next.set_label(locale[2])
			if page == 3:
				self.button_next.set_label(locale[4])
		else:
			system("mkdir -p ~/.config/autostart")
			system("cat /etc/xdg/autostart/mint-gnome-welcome.desktop > ~/.config/autostart/mint-gnome-welcome.desktop")
			system("echo >> ~/.config/autostart/mint-gnome-welcome.desktop")
			system("echo X-GNOME-Autostart-enabled=false >> ~/.config/autostart/mint-gnome-welcome.desktop")
			Gtk.main_quit()

	def action_panel(self, widget):
		self.style = "panel"
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.button_panel.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + dashtodock)
		system("gnome-extensions enable " + dashtopanel)

	def action_dock(self, widget):
		self.style = "dock"
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + dashtopanel)
		system("gnome-extensions enable " + dashtodock)

	def action_dash(self, widget):
		self.style = "dash"
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + dashtopanel)
		system("gnome-extensions disable " + dashtodock)

	def action_desktop(self, widget, state):
		self.icons = state
		if state:
			system("gnome-extensions enable " + desktopicons)
		else:
			system("gnome-extensions disable " + desktopicons)

	def action_theme(self, widget, state):
		self.dark = state
		if self.dark:
			system("gsettings set org.gnome.desktop.interface gtk-theme " + theme_gtk_dark)
			system("gsettings set org.gnome.desktop.interface icon-theme " + theme_icons_dark + self.color)
			system("sed -i 's/theme=.*/theme=" + theme_kv_dark + "/' '" + home + "/.config/Kvantum/kvantum.kvconfig'")
			system("sed -i 's/icon_theme=.*/icon_theme=" + theme_icons_dark + self.color + "/' '" + home + "/.config/qt5ct/qt5ct.conf'")
		else:
			system("gsettings set org.gnome.desktop.interface gtk-theme " + theme_gtk_light)
			system("gsettings set org.gnome.desktop.interface icon-theme " + theme_icons_light + self.color)
			system("sed -i 's/theme=.*/theme=" + theme_kv_light + "/' '" + home + "/.config/Kvantum/kvantum.kvconfig'")
			system("sed -i 's/icon_theme=.*/icon_theme=" + theme_icons_light + self.color + "/' '" + home + "/.config/qt5ct/qt5ct.conf'")

	def action_color(self, widget, theme):
		self.list_colors[theme_icons_colors.index(self.color)].get_style_context().remove_class("suggested-action")
		self.color = theme
		widget.get_style_context().add_class("suggested-action")
		if self.dark:
			system("gsettings set org.gnome.desktop.interface icon-theme " + theme_icons_dark + self.color)
			system("sed -i 's/icon_theme=.*/icon_theme=" + theme_icons_dark + self.color + "/' '" + home + "/.config/qt5ct/qt5ct.conf'")
		else:
			system("gsettings set org.gnome.desktop.interface icon-theme " + theme_icons_light + self.color)
			system("sed -i 's/icon_theme=.*/icon_theme=" + theme_icons_light + self.color + "/' '" + home + "/.config/qt5ct/qt5ct.conf'")

	def action_launch(self, widget, command):
		system(command + " &")



lang = getenv("LANG").split("_")[0]
home = getenv("HOME")

locale = []
if exists("/usr/share/mint-gnome-welcome/locale/" + lang):
	file = open("/usr/share/mint-gnome-welcome/locale/" + lang, "r")
	for line in file:
		locale.append(line[:-1])
	file.close()
if len(locale) < 21:
	locale = [ \
	"Welcome", "Ignore", "Next", "Back", "Finish", "Panel style (Windows-like)", "Dock style (MacOS-like)", "Dash style (Gnome's defaults)", \
	"Can't hide desktop icons in Live session", "Hide desktop icons", "Show desktop icons", "Light application theme", "Dark application theme", \
	"Your desktop is ready", "Set profile picture", "Set the background", "Browse software", "Install drivers", \
	"Keep in mind that Linux Mint Gnome is beta project. Be very careful when making updates!", \
	"Check Linux Mint Gnome development progress or report a bug on the", "GitHub project page"]

style = "dash"
icons = False
dark  = False
color = ""
if system("gsettings get org.gnome.shell enabled-extensions | grep -qv '" + dashtopanel + "'"):
	style = "panel"
if system("gsettings get org.gnome.shell enabled-extensions | grep -qv '" + dashtodock + "'"):
	style = "dock"
if system("gsettings get org.gnome.shell enabled-extensions | grep -qv '" + desktopicons + "'"):
	icons = True
if system("gsettings get org.gnome.desktop.interface gtk-theme | grep -qv '" + theme_gtk_dark + "'"):
	dark = True
for theme in theme_icons_colors:
	if theme and (system("gsettings get org.gnome.desktop.interface icon-theme | grep -qv '" + theme_icons_light + theme + "'") or system("gsettings get org.gnome.desktop.interface icon-theme | grep -qv '" + theme_icons_dark + theme + "'")):
		color = theme

if not exists(home + "/.config/autostart/mint-gnome-welcome.desktop"):
	system("mkdir -p ~/.config/autostart")
	system("cat /etc/xdg/autostart/mint-gnome-welcome.desktop > ~/.config/autostart/mint-gnome-welcome.desktop")

system("dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.overview.hide();'")
win = WelcomeWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
