#!/usr/bin/python3
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
from os import system



favorite_apps = "'org.gnome.Calculator.desktop', 'org.gnome.Notes.desktop', 'org.gnome.clocks.desktop', 'org.gnome.Calendar.desktop', 'org.gnome.Weather.desktop', 'org.gnome.Maps.desktop', 'firefox.desktop', 'thunderbird.desktop'"
system_tools = "'ca.desrt.dconf-editor.desktop', 'gnome-control-center.desktop', 'gnome-customization.desktop', 'gnome-system-monitor.desktop', 'gparted.desktop', 'gufw.desktop', 'mintbackup.desktop', 'mintdrivers.desktop', 'mintreport.desktop', 'mintsources.desktop', 'mintstick.desktop', 'mintstick-format.desktop', 'org.gnome.baobab.desktop', 'org.gnome.DiskUtility.desktop', 'org.gnome.font-viewer.desktop', 'org.gnome.Logs.desktop', 'org.gnome.seahorse.Application.desktop', 'org.gnome.Terminal.desktop', 'synaptic.desktop', 'timeshift-gtk.desktop'"

extensions_all    = []
extensions_panel  = ["dash-to-panel@jderose9.github.com", "launch-new-instance@gnome-shell-extensions.gcampax.github.com"]
extensions_dock   = ["dash-to-dock@micxgx.gmail.com", "launch-new-instance@gnome-shell-extensions.gcampax.github.com"]
extensions_dash   = []
extensions_show   = ["desktop-icons@csoriano"]
extensions_hide   = []

gsettings_all     = ["org.gnome.shell favorite-apps \"[" + favorite_apps + "]\"",
                     "org.gnome.desktop.app-folders folder-children \"['System-Tools']\"",
                     "org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/System-Tools/ name 'System-Tools.directory'",
                     "org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/System-Tools/ translate true",
                     "org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/System-Tools/ apps \"[" + system_tools + "]\"",
                     "org.gnome.Terminal.Legacy.Settings theme-variant 'dark'",
                     "org.gnome.Terminal.ProfilesList list \"['00000000-0000-0000-0000-000000000000']\"",
                     "org.gnome.Terminal.ProfilesList default '00000000-0000-0000-0000-000000000000'",
                     "org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:00000000-0000-0000-0000-000000000000/ visible-name 'Linux Mint Gnome'",
                     "org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:00000000-0000-0000-0000-000000000000/ cursor-shape 'ibeam'"]

gsettings_panel   = ["org.gnome.desktop.wm.preferences button-layout appmenu:minimize,maximize,close"]
gsettings_dock    = ["org.gnome.desktop.wm.preferences button-layout appmenu:minimize,maximize,close"]
gsettings_dash    = ["org.gnome.desktop.wm.preferences button-layout appmenu:close"]
gsettings_show    = []
gsettings_hide    = []

theme_gnome_light = "Materia-light"
theme_gnome_dark  = "Materia-dark"
theme_gtk_light   = "Materia-light"
theme_gtk_dark    = "Materia-dark"
theme_icons_light = "Papirus-Light"
theme_icons_dark  = "Papirus-Dark"
theme_curs_light  = "Papirus-Cursors"
theme_curs_dark   = "Papirus-Cursors"



def extensions(extensions, enable):
	for extension in extensions:
		if enable:
			system("gnome-extensions enable " + extension)
		else:
			system("gnome-extensions disable " + extension)

def gsettings(gsettings):
	for gsetting in gsettings:
		system("gsettings set " + gsetting)

def theme(dark):
	if dark:
		system("gsettings set org.gnome.shell.extensions.user-theme name " + theme_gnome_dark)
		system("gsettings set org.gnome.desktop.interface gtk-theme " + theme_gtk_dark)
		system("gsettings set org.gnome.desktop.interface icon-theme " + theme_icons_dark)
		system("gsettings set org.gnome.desktop.interface cursor-theme " + theme_curs_dark)
	else:
		system("gsettings set org.gnome.shell.extensions.user-theme name " + theme_gnome_light)
		system("gsettings set org.gnome.desktop.interface gtk-theme " + theme_gtk_light)
		system("gsettings set org.gnome.desktop.interface icon-theme " + theme_icons_light)
		system("gsettings set org.gnome.desktop.interface cursor-theme " + theme_curs_light)



class WelcomeWindow(Gtk.Window):
	def __init__(self):

		self.image_panel = Gtk.Image()
		self.image_panel.set_from_file("/usr/share/mint-gnome-welcome/panel.png")
		self.image_dock = Gtk.Image()
		self.image_dock.set_from_file("/usr/share/mint-gnome-welcome/dock.png")
		self.image_dash = Gtk.Image()
		self.image_dash.set_from_file("/usr/share/mint-gnome-welcome/dash.png")

		Gtk.Window.__init__(self, title = "Welcome")
		self.set_icon_name("preferences-desktop-user")
		self.set_position(Gtk.WindowPosition.CENTER)
		self.set_resizable(False)
		self.set_border_width(32)
		self.box = Gtk.Box(spacing = 32, orientation = Gtk.Orientation.VERTICAL)
		self.add(self.box)

		self.header = Gtk.HeaderBar()
		self.header.set_title("Welcome")
		self.button_skip = Gtk.Button(label = "Skip")
		self.button_skip.connect("clicked", self.action_skip)
		self.header.pack_start(self.button_skip)
		self.button_confirm = Gtk.Button(label = "Confirm")
		self.button_confirm.get_style_context().add_class("suggested-action")
		self.button_confirm.connect("clicked", self.action_confirm)
		self.header.pack_end(self.button_confirm)
		self.set_titlebar(self.header)

		self.box_styles = Gtk.Box(spacing = 8)
		self.box.pack_start(self.box_styles, True, False, 0)
		self.box_options = Gtk.Box(spacing = 32)
		self.box.pack_start(self.box_options, True, False, 0)
		self.box_desktop = Gtk.Box(spacing = 8)
		self.box_options.pack_start(self.box_desktop, True, False, 0)
		self.box_theme = Gtk.Box(spacing = 8)
		self.box_options.pack_start(self.box_theme, True, False, 0)

		self.button_panel = Gtk.Button(label = "\nPanel style (Windows like)")
		self.button_panel.set_always_show_image(True)
		self.button_panel.set_image(self.image_panel)
		self.button_panel.set_image_position(Gtk.PositionType.TOP)
		self.button_panel.connect("clicked", self.action_panel)
		self.box_styles.pack_start(self.button_panel, True, True, 0)

		self.button_dock = Gtk.Button(label = "\nDock style (MacOS like)")
		self.button_dock.set_always_show_image(True)
		self.button_dock.set_image(self.image_dock)
		self.button_dock.set_image_position(Gtk.PositionType.TOP)
		self.button_dock.connect("clicked", self.action_dock)
		self.box_styles.pack_start(self.button_dock, True, True, 0)

		self.button_dash = Gtk.Button(label = "\nDash style (Gnome default)")
		self.button_dash.set_always_show_image(True)
		self.button_dash.set_image(self.image_dash)
		self.button_dash.set_image_position(Gtk.PositionType.TOP)
		self.button_dash.get_style_context().add_class("suggested-action")
		self.button_dash.connect("clicked", self.action_dash)
		self.box_styles.pack_start(self.button_dash, True, True, 0)

		self.text_hide = Gtk.Label(label = "Hide desktop icons")
		self.box_desktop.pack_start(self.text_hide, False, False, 0)
		self.switch_desktop = Gtk.Switch()
		self.switch_desktop.set_state(True)
		self.switch_desktop.connect("state_set", self.action_desktop)
		self.box_desktop.pack_start(self.switch_desktop, False, False, 0)
		self.text_show = Gtk.Label(label = "Show desktop icons")
		self.box_desktop.pack_start(self.text_show, False, False, 0)

		#self.text_live = Gtk.Label(label = "Can't hide desktop icons in live session")
		#self.box_desktop.pack_start(self.text_live, False, False, 0)

		self.text_light = Gtk.Label(label = "Light theme")
		self.box_theme.pack_start(self.text_light, False, False, 0)
		self.switch_theme = Gtk.Switch()
		self.switch_theme.set_state(True)
		self.switch_theme.connect("state_set", self.action_theme)
		self.box_theme.pack_start(self.switch_theme, False, False, 0)
		self.text_dark = Gtk.Label(label = "Dark theme")
		self.box_theme.pack_start(self.text_dark, False, False, 0)


	def action_skip(self, widget):
		Gtk.main_quit()

	def action_confirm(self, widget):
		print("Dont show again")
		Gtk.main_quit()

	def action_panel(self, widget):
		self.button_panel.get_style_context().add_class("suggested-action")
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		extensions(extensions_dock, False)
		extensions(extensions_dash, False)
		extensions(extensions_panel, True)
		gsettings(gsettings_panel)

	def action_dock(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().add_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		extensions(extensions_panel, False)
		extensions(extensions_dash, False)
		extensions(extensions_dock, True)
		gsettings(gsettings_dock)

	def action_dash(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().add_class("suggested-action")
		extensions(extensions_panel, False)
		extensions(extensions_dock, False)
		extensions(extensions_dash, True)
		gsettings(gsettings_dash)

	def action_desktop(self, widget, state):
		if state:
			extensions(extensions_hide, False)
			extensions(extensions_show, True)
		else:
			extensions(extensions_show, False)
			extensions(extensions_hide, True)

	def action_theme(self, widget, state):
		if state:
			theme(True)
		else:
			theme(False)



extensions(extensions_all, True)
extensions(extensions_panel, False)
extensions(extensions_dock, False)
extensions(extensions_dash, True)
gsettings(gsettings_all)
gsettings(gsettings_dash)
theme(True)
win = WelcomeWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
