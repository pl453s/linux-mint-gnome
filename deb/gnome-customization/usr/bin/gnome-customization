#!/usr/bin/python3

#CHECK EXTENSION STATE AFTER SWITCH

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Handy', '0.0')
from gi.repository import Gtk, Gio, Handy, Pango
from os import system, getenv, listdir
from os.path import exists
from pexpect import runu, spawnu, EOF
Handy.init()
dashtopanel  = "dash-to-panel@jderose9.github.com"
dashtodock   = "dash-to-dock@micxgx.gmail.com"
desktopicons = "ding@rastersoft.com"
topindicator = "topindicatorapp@quiro9.com"



class DraftWindow(Gtk.Window):
	def __init__(self):

		self.dashtopanel  = "dash-to-panel@jderose9.github.com"
		self.dashtodock   = "dash-to-dock@micxgx.gmail.com"
		self.desktopicons = "ding@rastersoft.com"
		self.topindicator = "topindicatorapp@quiro9.com"

		self.themes_gtk   = ["Adwaita"]
		self.themes_icons = ["Adwaita"]
		self.themes_curs  = ["Adwaita"]
		for path in ["/usr/share/themes/", "/usr/local/share/themes/", getenv("HOME") + "/.themes/", getenv("HOME") + "/.local/share/themes/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_gtk and not theme == "HighContrast" and not theme == "HighContrastInverse":
						self.themes_gtk.append(theme)
		for path in ["/usr/share/icons/", "/usr/local/share/icons/", getenv("HOME") + "/.icons/", getenv("HOME") + "/.local/share/icons/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_icons and not theme == "HighContrast" and not theme == "HighContrastInverse" \
					and not theme == "default" and not theme == "gnome" and not theme == "hicolor" and not theme == "locolor":
						self.themes_icons.append(theme)
					if exists(path + theme + "/cursor.theme") and not theme in self.themes_curs:
						self.themes_curs.append(theme)
		self.themes_gtk.sort()
		self.themes_icons.sort()
		self.themes_curs.sort()

		self.org_gnome_shell                  = Gio.Settings.new("org.gnome.shell")
		self.org_gnome_desktop_interface      = Gio.Settings.new("org.gnome.desktop.interface")
		self.org_gnome_desktop_wm_preferences = Gio.Settings.new("org.gnome.desktop.wm.preferences")
		self.enabled_extensions               = self.org_gnome_shell.get_strv("enabled-extensions")
		self.theme_gtk                        = self.org_gnome_desktop_interface.get_string("gtk-theme")
		self.theme_icons                      = self.org_gnome_desktop_interface.get_string("icon-theme")
		self.theme_curs                       = self.org_gnome_desktop_interface.get_string("cursor-theme")

		self.style = "dash"
		self.icons = False
		self.tray  = False
		if self.dashtopanel in self.enabled_extensions:
			self.style = "panel"
		if self.dashtodock in self.enabled_extensions:
			self.style = "dock"
		if self.desktopicons in self.enabled_extensions:
			self.icons = True
		if self.topindicator in self.enabled_extensions:
			self.tray = True

		Gtk.Window.__init__(self, title = "Customization")
		self.set_icon_name("gnome-color-manager")
		self.set_resizable(False)
		self.set_border_width(32)
		self.header = Gtk.HeaderBar()
		self.header.set_title("Customization")
		self.header.set_show_close_button(True)
		self.set_titlebar(self.header)
		self.box = Gtk.Box(spacing = 32)
		self.add(self.box)
		self.box_styles = Gtk.Box(spacing = 24, orientation = Gtk.Orientation.VERTICAL)
		self.box_options = Gtk.Box(spacing = 8, orientation = Gtk.Orientation.VERTICAL)
		self.box.pack_start(self.box_styles, True, False, 0)
		self.box.pack_start(Gtk.Separator(), True, False, 0)
		self.box.pack_start(self.box_options, True, False, 0)

		self.box_desktop   = Gtk.Box(spacing = 8)
		self.box_indicator = Gtk.Box(spacing = 8)
		self.box_gnome     = Gtk.Box(spacing = 8)
		self.box_gtk       = Gtk.Box(spacing = 8)
		self.box_icons     = Gtk.Box(spacing = 8)
		self.box_curs      = Gtk.Box(spacing = 8)
		self.box_infos     = Gtk.Box(spacing = 8)
		self.box_more      = Gtk.Box(spacing = 8)
		self.box_options.pack_start(self.box_desktop, False, False, 0)
		self.box_options.pack_start(self.box_indicator, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_start(self.box_gnome, False, False, 0)
		self.box_options.pack_start(self.box_gtk, False, False, 0)
		self.box_options.pack_start(self.box_icons, False, False, 0)
		self.box_options.pack_start(self.box_curs, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_start(self.box_infos, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_end(self.box_more, False, False, 0)

		self.button_panel = Gtk.Button(label = "Panel style")
		self.button_dock  = Gtk.Button(label = "Dock style")
		self.button_dash  = Gtk.Button(label = "Dash style")
		self.button_panel.set_always_show_image(True)
		self.button_dock.set_always_show_image(True)
		self.button_dash.set_always_show_image(True)
		self.image_panel = Gtk.Image()
		self.image_dock  = Gtk.Image()
		self.image_dash  = Gtk.Image()
		self.image_panel.set_from_file("/usr/share/gnome-customization/panel.png")
		self.image_dock.set_from_file("/usr/share/gnome-customization/dock.png")
		self.image_dash.set_from_file("/usr/share/gnome-customization/dash.png")
		self.button_panel.set_image(self.image_panel)
		self.button_dock.set_image(self.image_dock)
		self.button_dash.set_image(self.image_dash)
		self.button_panel.set_image_position(Gtk.PositionType.TOP)
		self.button_dock.set_image_position(Gtk.PositionType.TOP)
		self.button_dash.set_image_position(Gtk.PositionType.TOP)
		if self.style == "panel":
			self.button_panel.get_style_context().add_class("suggested-action")
		if self.style == "dock":
			self.button_dock.get_style_context().add_class("suggested-action")
		if self.style == "dash":
			self.button_dash.get_style_context().add_class("suggested-action")
		self.button_panel.connect("clicked", self.action_panel)
		self.button_dock.connect("clicked", self.action_dock)
		self.button_dash.connect("clicked", self.action_dash)
		self.box_styles.pack_start(self.button_panel, True, False, 0)
		self.box_styles.pack_start(self.button_dock, True, False, 0)
		self.box_styles.pack_start(self.button_dash, True, False, 0)

		self.text_desktop   = Gtk.Label()
		self.text_indicator = Gtk.Label()
		self.text_desktop.set_markup("Desktop Icons NG extension\n<small><i>To configure: Right clic on the desktop > Properties</i></small>")
		self.text_indicator.set_markup("Top Indicator App extension\n<small><i>Add third-party tray icons next to system tray icons</i></small>")
		self.switch_desktop   = Gtk.Switch()
		self.switch_indicator = Gtk.Switch()
		if self.icons:
			self.switch_desktop.set_state(True)
		if self.tray:
			self.switch_indicator.set_state(True)
		self.switch_desktop.connect("state_set", self.action_desktop)
		self.switch_indicator.connect("state_set", self.action_indicator)
		self.box_desktop.pack_start(self.text_desktop, False, False, 0)
		self.box_indicator.pack_start(self.text_indicator, False, False, 0)
		self.box_desktop.pack_end(self.switch_desktop, False, False, 0)
		self.box_indicator.pack_end(self.switch_indicator, False, False, 0)

		self.text_gnome  = Gtk.Label(label = "Gnome theme")
		self.text_gtk    = Gtk.Label(label = "GTK theme")
		self.text_icons  = Gtk.Label(label = "Icons theme")
		self.text_curs   = Gtk.Label(label = "Cursor theme")
		self.info_gnome  = Gtk.Label()
		self.combo_gtk   = Gtk.ComboBoxText()
		self.combo_icons = Gtk.ComboBoxText()
		self.combo_curs  = Gtk.ComboBoxText()
		self.info_gnome.set_markup("<i>Select a Gnome theme on the login screen\n<small>Use 'gnome-custom-theme-install' to install a theme</small></i>")
		self.combo_gtk.set_property("width-request", 256)
		self.combo_icons.set_property("width-request", 256)
		self.combo_curs.set_property("width-request", 256)
		for theme in self.themes_gtk:
			self.combo_gtk.append_text(theme)
		for theme in self.themes_icons:
			self.combo_icons.append_text(theme)
		for theme in self.themes_curs:
			self.combo_curs.append_text(theme)
		if self.theme_gtk in self.themes_gtk:
			self.combo_gtk.set_active(self.themes_gtk.index(self.theme_gtk))
		if self.theme_icons in self.themes_icons:
			self.combo_icons.set_active(self.themes_icons.index(self.theme_icons))
		if self.theme_curs in self.themes_curs:
			self.combo_curs.set_active(self.themes_curs.index(self.theme_curs))
		self.combo_gtk.connect("changed", self.action_gtk)
		self.combo_icons.connect("changed", self.action_icons)
		self.combo_curs.connect("changed", self.action_curs)
		self.box_gnome.pack_start(self.text_gnome, False, False, 0)
		self.box_gtk.pack_start(self.text_gtk, False, False, 0)
		self.box_icons.pack_start(self.text_icons, False, False, 0)
		self.box_curs.pack_start(self.text_curs, False, False, 0)
		self.box_gnome.pack_end(self.info_gnome, False, False, 0)
		self.box_gtk.pack_end(self.combo_gtk, False, False, 0)
		self.box_icons.pack_end(self.combo_icons, False, False, 0)
		self.box_curs.pack_end(self.combo_curs, False, False, 0)

		self.text_infos = Gtk.Label(label = "\n"
		"This is a first \"Customization\" GUI. In the future, this window\n"
		"should be splited in many tabs, allowing you to customize:\n\n"
		" - Styles and Gnome extensions\n - Desktop and GDM3 appearance\n"
		" - Add, hide and edit application icons\n"
		" - Add, hide and edit startup programs\n"
		" - User folders paths and names\n"
		" - Qt5 and advanced Gnome settings\n"
		" - Plymouth theme and Grub theme\n")
		self.box_infos.pack_start(self.text_infos, False, False, 0)

		self.button_apps   = Gtk.Button(label = "Applications")
		self.button_start  = Gtk.Button(label = "Startup")
		self.button_tweaks = Gtk.Button(label = "Tweaks")
		self.button_qt5ct  = Gtk.Button(label = "Qt5 CT")
		self.button_apps.connect("clicked", self.action_launch, "menulibre")
		self.button_start.connect("clicked", self.action_launch, "gnome-session-properties")
		self.button_tweaks.connect("clicked", self.action_launch, "gnome-tweaks")
		self.button_qt5ct.connect("clicked", self.action_launch, "notify-send -i qt5ct 'Please wait...' 'Qt5 Configuration Tool is starting' ; qt5ct")
		self.box_more.pack_start(self.button_apps, True, True, 0)
		self.box_more.pack_start(self.button_start, True, True, 0)
		self.box_more.pack_start(self.button_tweaks, True, True, 0)
		self.box_more.pack_start(self.button_qt5ct, True, True, 0)


	def action_panel(self, widget):
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.button_panel.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + self.dashtodock)
		system("gnome-extensions enable " + self.dashtopanel)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def action_dock(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + self.dashtopanel)
		system("gnome-extensions enable " + self.dashtodock)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def action_dash(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + self.dashtopanel)
		system("gnome-extensions disable " + self.dashtodock)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:close")

	def action_desktop(self, widget, state):
		if state:
			system("gnome-extensions enable " + self.desktopicons)
		else:
			system("gnome-extensions disable " + self.desktopicons)

	def action_indicator(self, widget, state):
		if state:
			system("gnome-extensions enable " + self.topindicator)
		else:
			system("gnome-extensions disable " + self.topindicator)

	def action_gtk(self, widget):
		self.org_gnome_desktop_interface.set_string("gtk-theme", widget.get_active_text())

	def action_icons(self, widget):
		self.org_gnome_desktop_interface.set_string("icon-theme", widget.get_active_text())

	def action_curs(self, widget):
		self.org_gnome_desktop_interface.set_string("cursor-theme", widget.get_active_text())

	def action_launch(self, widget, command):
		system(command + " &")



class MainWindow(Gtk.Window):
	def __init__(self):
		self.name = "Customization (BETA)"
		Gtk.Window.__init__(self, title = self.name)
		self.set_icon_name("gnome-color-manager")
		self.body = Gtk.Box()
		self.add(self.body)
		self.bar = Handy.TitleBar()
		self.head = Handy.Leaflet()
		self.head.set_transition_type(Handy.LeafletTransitionType.SLIDE)
		self.lhead = Handy.HeaderBar(title = self.name)
		self.rhead = Handy.HeaderBar(title = self.name)
		self.rhead.props.hexpand = True
		self.rhead.props.show_close_button = True
		self.rhead_start = Gtk.Stack()
		self.rhead_end = Gtk.Stack()
		self.rhead.pack_start(self.rhead_start)
		self.rhead.pack_end(self.rhead_end)
		separator = Gtk.Separator()
		separator.get_style_context().add_class("sidebar")
		self.head.add(self.lhead)
		self.head.add(separator)
		self.head.add(self.rhead)
		self.bar.add(self.head)
		self.set_titlebar(self.bar)

		self.lbody = Gtk.Box()
		self.rbody = Gtk.Stack()
		self.list = Gtk.ListBox(width_request = 200)
		self.list.connect("row-selected", self.switch_tab)
		self.lbody.pack_start(self.list, True, True, 0)
		#self.panel.pack_start(Gtk.Separator(), False, False, 0)
		for tab in [ExtensionsTab(), DesktopTab(), LoginScreenTab(), MoreTab()]:
			row = Gtk.ListBoxRow()
			row.add(Gtk.Label(label = tab.name, xalign = 0.0, margin = 10))
			self.list.insert(row, -1)
			self.rhead_start.add_named(tab.head_start, tab.name)
			self.rhead_end.add_named(tab.head_end, tab.name)
			self.rbody.add_named(tab, tab.name)
		self.body.pack_start(self.lbody, False, False, 0)
		self.body.pack_start(Gtk.Separator(), False, False, 0)
		self.body.pack_start(self.rbody, True, True, 0)

		self.lsize = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.HORIZONTAL)
		self.lsize.add_widget(self.lhead)
		self.lsize.add_widget(self.lbody)
		self.rsize = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.HORIZONTAL)
		self.rsize.add_widget(self.rhead)
		self.rsize.add_widget(self.rbody)


	def switch_tab(self, widget, subwidget):
		name = subwidget.get_child().get_text()
		self.rhead.set_title(name)
		self.rhead_start.set_visible_child_name(name)
		self.rhead_end.set_visible_child_name(name)
		self.rbody.set_visible_child_name(name)



class ExtensionsTab(Gtk.Box):
	def __init__(self):
		self.name = "Extensions"
		self.head_start = Gtk.Box()
		self.head_end = Gtk.Box()
		self.header_popover = Gtk.Popover()
		self.header_text = Gtk.Label(margin = 20)
		self.header_text.set_markup("<b>Warning: Disable all extensions if you experience system issues.</b>\n\nTo add a Gnome extension, install it with your package manager or\nmanually browse, download and install it from <a href='https://extensions.gnome.org'>extensions.gnome.org</a>.\n\nMake sure the extension folder name matches its UUID. You can install\nan extension directly from your browser with the appropriate addon.\n\nValid paths to place extensions are:\n - <tt><a href='file:///usr/share/gnome-shell/extensions'>/usr/share/gnome-shell/extensions</a></tt>\n - <tt><a href='file:///home/" + getenv("USER") + "/.local/share/gnome-shell/extensions'>/home/" + getenv("USER") + "/.local/share/gnome-shell/extensions</a></tt>")
		self.header_text.show_all()
		self.header_popover.add(self.header_text)
		self.header_info = Gtk.MenuButton(image = Gtk.Image(icon_name = "dialog-information-symbolic"), popover = self.header_popover)
		self.header_switch = Gtk.Switch()
		self.header_switch.set_state(True)
		self.header_switch.connect("state-set", self.switchall)
		self.head_start.pack_start(self.header_info, False, False, 0)
		self.head_end.pack_end(self.header_switch, False, False, 0)
		Gtk.Box.__init__(self, margin = 20, spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box = Gtk.Box(spacing = 20)
		self.pack_start(self.box, True, True, 0)
		
		self.box_styles = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.scroll_others = Gtk.ScrolledWindow(min_content_width = 300, max_content_width = 300)
		self.box.pack_start(self.box_styles, True, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.scroll_others, True, False, 0)
		self.box_others = Gtk.Box(spacing = 10, orientation = Gtk.Orientation.VERTICAL, margin_right = 20, margin_top = 10, margin_bottom = 10)
		self.scroll_others.add(self.box_others)
		self.size_others = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.VERTICAL)
		
		self.org_gnome_shell                  = Gio.Settings.new("org.gnome.shell")
		self.org_gnome_desktop_wm_preferences = Gio.Settings.new("org.gnome.desktop.wm.preferences")
		self.extensions_list                  = runu("gnome-extensions list").split("\n")
		self.extensions_list_info             = runu("gnome-extensions list --details").split("\n")
		self.extensions_list_pref             = runu("gnome-extensions list --prefs").split("\n")
		self.extensions_list_enab             = runu("gnome-extensions list --enabled").split("\n")
		self.dashtopanel_uuid                 = None
		self.dashtopanel_pref                 = None
		self.dashtopanel_enab                 = None
		self.dashtodock_uuid                  = None
		self.dashtodock_pref                  = None
		self.dashtodock_enab                  = None
		self.extensions                       = []
		for extension in self.extensions_list:
			if extension:
				uuid = extension[:-1]
				name = self.extensions_list_info[self.extensions_list_info.index(extension)+1][7:-1]
				pref = extension in self.extensions_list_pref
				enab = extension in self.extensions_list_enab
				if uuid == dashtopanel:
					self.dashtopanel_uuid = uuid
					self.dashtopanel_pref = pref
					self.dashtopanel_enab = enab
				elif uuid == dashtodock:
					self.dashtodock_uuid = uuid
					self.dashtodock_pref = pref
					self.dashtodock_enab = enab
				else:
					box = Gtk.Box(spacing = 10)
					label = Gtk.Label(label = name, xalign = 0.0, ellipsize = Pango.EllipsizeMode.END)
					box.pack_start(label, True, True, 0)
					subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
					switch = Gtk.Switch()
					switch.set_state(enab)
					switch.connect("state-set", self.switch, uuid)
					subbox.pack_start(switch, True, False, 0)
					box.pack_end(subbox, False, False, 0)
					if pref:
						config = Gtk.Button(image = Gtk.Image(icon_name = "emblem-system-symbolic"))
						config.connect("clicked", self.launch, "gnome-extensions prefs " + uuid)
						box.pack_end(config, False, False, 0)
					self.extensions.append([name, box])

		if self.dashtopanel_uuid:
			box = Gtk.Box(spacing = 20)
			self.panel = Gtk.Button(label = "Panel style", image = Gtk.Image(file = "/usr/share/gnome-customization/panel.png"))
			self.panel.set_always_show_image(True)
			self.panel.set_image_position(Gtk.PositionType.TOP)
			self.panel.connect("clicked", self.topanel)
			if self.dashtopanel_enab:
				self.panel.get_style_context().add_class("suggested-action")
			subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
			if self.dashtopanel_pref:
				config = Gtk.Button(image = Gtk.Image(icon_name = "emblem-system-symbolic"))
				config.connect("clicked", self.launch, "gnome-extensions prefs " + self.dashtopanel_uuid)
				subbox.pack_start(config, True, False, 0)
			box.pack_start(self.panel, False, False, 0)
			box.pack_start(subbox, False, False, 0)
			self.box_styles.pack_start(box, False, False, 0)
		if self.dashtodock_uuid:
			box = Gtk.Box(spacing = 20)
			self.dock = Gtk.Button(label = "Dock style", image = Gtk.Image(file = "/usr/share/gnome-customization/dock.png"))
			self.dock.set_always_show_image(True)
			self.dock.set_image_position(Gtk.PositionType.TOP)
			self.dock.connect("clicked", self.todock)
			if self.dashtodock_enab:
				self.dock.get_style_context().add_class("suggested-action")
			subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
			if self.dashtodock_pref:
				config = Gtk.Button(image = Gtk.Image(icon_name = "emblem-system-symbolic"))
				config.connect("clicked", self.launch, "gnome-extensions prefs " + self.dashtodock_uuid)
				subbox.pack_start(config, True, False, 0)
			box.pack_start(self.dock, False, False, 0)
			box.pack_start(subbox, False, False, 0)
			self.box_styles.pack_start(box, False, False, 0)
		box = Gtk.Box(spacing = 20)
		self.dash = Gtk.Button(label = "Dash style", image = Gtk.Image(file = "/usr/share/gnome-customization/dash.png"))
		self.dash.set_always_show_image(True)
		self.dash.set_image_position(Gtk.PositionType.TOP)
		self.dash.connect("clicked", self.todash)
		if not self.dashtopanel_enab and not self.dashtodock_enab:
			self.dash.get_style_context().add_class("suggested-action")
		subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
		box.pack_start(self.dash, False, False, 0)
		box.pack_start(subbox, False, False, 0)
		self.box_styles.pack_start(box, False, False, 0)

		self.extensions.sort()
		for extension in self.extensions:
			self.size_others.add_widget(extension[1])
			self.box_others.pack_start(extension[1], False, False, 0)
			separator = Gtk.Separator()
			self.box_others.pack_start(separator, False, False, 0)
		separator.destroy()


	def topanel(self, widget):
		if self.dashtodock_uuid:
			self.dock.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtodock_uuid)
		self.dash.get_style_context().remove_class("suggested-action")
		self.panel.get_style_context().add_class("suggested-action")
		system("gnome-extensions enable " + self.dashtopanel_uuid)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def todock(self, widget):
		if self.dashtopanel_uuid:
			self.panel.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtopanel_uuid)
		self.dash.get_style_context().remove_class("suggested-action")
		self.dock.get_style_context().add_class("suggested-action")
		system("gnome-extensions enable " + self.dashtodock_uuid)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def todash(self, widget):
		if self.dashtopanel_uuid:
			self.panel.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtopanel_uuid)
		if self.dashtodock_uuid:
			self.dock.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtodock_uuid)
		self.dash.get_style_context().add_class("suggested-action")
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:close")

	def switchall(self, widget, state):
		self.org_gnome_shell.set_boolean("disable-user-extensions", not state)

	def switch(self, widget, state, uuid):
		if state:
			system("gnome-extensions enable " + uuid)
		else:
			system("gnome-extensions disable " + uuid)

	def launch(self, widget, command):
		system(command + " &")



class DesktopTab(Gtk.Box):
	def __init__(self):
		self.name = "Desktop (not ready)"
		self.head_start = Gtk.Box()
		self.head_end = Gtk.Box()
		self.header_popover = Gtk.Popover()
		self.header_text = Gtk.Label(margin = 20)
		self.header_text.set_markup("To add a Gnome, GTK, icons or cursors theme, install it with your package\nmanager or manually browse, download and install it from <a href='https://gnome-look.org'>gnome-look.org</a>.\n\nValid paths to place Gnome and GTK themes are:\n - <tt><a href='file:///usr/share/themes'>/usr/share/themes</a></tt>\n - <tt><a href='file:///home/" + getenv("USER") + "/.themes'>/home/" + getenv("USER") + "/.themes</a></tt>\n\nValid paths to place icons and cursors themes are:\n - <tt><a href='file:///usr/share/icons'>/usr/share/icons</a></tt>\n - <tt><a href='file:///home/" + getenv("USER") + "/.icons'>/home/" + getenv("USER") + "/.icons</a></tt>")
		self.header_text.show_all()
		self.header_popover.add(self.header_text)
		self.header_info = Gtk.MenuButton(image = Gtk.Image(icon_name = "dialog-information-symbolic"), popover = self.header_popover)
		self.head_start.pack_start(self.header_info, False, False, 0)
		Gtk.Box.__init__(self, margin = 20, spacing = 20)
		self.box = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.pack_start(self.box, True, True, 0)

		self.box_top = Gtk.Box()
		self.box_middle = Gtk.Box()
		self.box_bottom = Gtk.Box()
		self.box.pack_start(self.box_top, True, True, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.box_middle, True, True, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.box_bottom, True, True, 0)
		self.box_top.pack_start(Gtk.Label(label = "Gnome Shell theme\n\nGTK applications theme\n\nIcons theme\n\nCursors theme\n\nFont\n\nAnimations"), True, True, 0)
		self.box_top.pack_end(Gtk.Label(label = " ( i )\n\n[ v ]\n\n[ v ]\n\n[ v ]\n\n[ F ]\n\n--O"), True, True, 0)
		self.box_middle.pack_start(Gtk.Label(label = "Show week number in the calendar\n\nShow weekday in the topbar\n\nShow date in the topbar\n\nShow seconds in the topbar\n\nShow battery percentage in the topbar\n\nAllow volume over than 100%"), True, True, 0)
		self.box_middle.pack_end(Gtk.Label(label = "O--\n\nO--\n\n--O\n\nO--\n\nO--\n\nO--"), True, True, 0)
		self.box_bottom.pack_start(Gtk.Label(label = "Activities hot-corner\n\nWorkspaces (0 for dynamic)\n\nWorkspaces only on primary monitor"), True, True, 0)
		self.box_bottom.pack_end(Gtk.Label(label = "--O\n\n-  +\n\n--O"), True, True, 0)


class LoginScreenTab(Gtk.Box):
	def __init__(self):
		self.admin = None
		self.name = "Login screen (not ready)"
		self.head_start = Gtk.Box()
		self.head_end = Gtk.Box()
		self.header_popover = Gtk.Popover()
		self.header_text = Gtk.Label(margin = 20)
		self.header_text.set_markup("To add a Gnome, GTK, icons or cursors theme, install it with your package\nmanager or manually browse, download and install it from <a href='https://gnome-look.org'>gnome-look.org</a>.\n\nValid paths to place Gnome and GTK themes are:\n - <tt><a href='file:///usr/share/themes'>/usr/share/themes</a></tt>\n\nValid paths to place icons and cursors themes are:\n - <tt><a href='file:///usr/share/icons'>/usr/share/icons</a></tt>")
		self.header_text.show_all()
		self.header_popover.add(self.header_text)
		self.header_info = Gtk.MenuButton(image = Gtk.Image(icon_name = "dialog-information-symbolic"), popover = self.header_popover)
		self.header_unlock = Gtk.Button(image = Gtk.Image(icon_name = "system-lock-screen-symbolic"))
		self.header_unlock.connect("clicked", self.unlock)
		self.head_start.pack_start(self.header_info, False, False, 0)
		self.head_end.pack_end(self.header_unlock, False, False, 0)
		Gtk.Box.__init__(self, margin = 20, spacing = 20)
		self.box = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.pack_start(self.box, True, True, 0)
		self.box.set_sensitive(False)

		self.box_top = Gtk.Box()
		self.box_middle = Gtk.Box()
		self.box_bottom = Gtk.Box()
		self.box.pack_start(self.box_top, True, True, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.box_middle, True, True, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.box_bottom, True, True, 0)
		self.box_top.pack_start(Gtk.Label(label = "Gnome Shell theme\n\nGTK applications theme\n\nIcons theme\n\nCursors theme\n\nFont\n\nAnimations"), True, True, 0)
		self.box_top.pack_end(Gtk.Label(label = " ( i )\n\n[ v ]\n\n[ v ]\n\n[ v ]\n\n[ F ]\n\n--O"), True, True, 0)
		self.box_middle.pack_start(Gtk.Label(label = "Show week number in the calendar\n\nShow weekday in the topbar\n\nShow date in the topbar\n\nShow seconds in the topbar\n\nShow battery percentage in the topbar\n\nAllow volume over than 100%"), True, True, 0)
		self.box_middle.pack_end(Gtk.Label(label = "O--\n\nO--\n\n--O\n\nO--\n\nO--\n\nO--"), True, True, 0)
		self.box_bottom.pack_start(Gtk.Label(label = "Disable users list\n\nAllowed failures\n\nWatermark"), True, True, 0)
		self.box_bottom.pack_end(Gtk.Label(label = "O--\n\n-  +\n\n[ / ]"), True, True, 0)


	def unlock(self, widget):
		self.admin = get_admin()
		if self.admin:
			self.header_unlock.set_sensitive(False)
			self.box.set_sensitive(True)



class MoreTab(Gtk.Box):
	def __init__(self):
		self.name = "More"
		self.head_start = Gtk.Box()
		self.head_end = Gtk.Box()
		Gtk.Box.__init__(self, margin = 20, spacing = 20)
		self.box = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.pack_start(self.box, True, False, 0)

		self.box_head = Gtk.Box(spacing = 20)
		self.box_buttons = Gtk.Box(spacing = 20)
		self.label_gui = Gtk.Label()
		self.label_cmd = Gtk.Label()
		self.label_gui.set_markup("<b>Graphical additional tools</b>")
		self.label_cmd.set_markup("<b>Command line additional tools</b>")
		self.box.pack_start(self.box_head, False, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.label_gui, False, False, 0)
		self.box.pack_start(self.box_buttons, False, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.label_cmd, False, False, 0)

		self.draft = Gtk.Button(label = "This is a BETA version\nReturn to the old GUI")
		self.links = Gtk.Label()
		self.draft.connect("clicked", self.returntodraft)
		self.links.set_markup("Check Linux Mint Gnome development progress\nor report a bug on the <a href='https://github.com/pl453s/linux-mint-gnome'>GitHub project page</a>.")
		self.box_head.pack_start(self.draft, True, False, 0)
		self.box_head.pack_start(Gtk.Separator(), False, False, 0)
		self.box_head.pack_start(self.links, True, False, 0)

		self.tweaks = Gtk.Button(label = "Tweaks Mini")
		self.apps   = Gtk.Button(label = "Apps. List")
		self.webapp = Gtk.Button(label = "Web Apps.")
		self.start  = Gtk.Button(label = "Startup Apps.")
		self.qt5ct  = Gtk.Button(label = "Qt5 CT")
		self.tweaks.connect("clicked", self.launch, "gnome-tweaks")
		self.apps.connect("clicked", self.launch, "menulibre")
		self.webapp.connect("clicked", self.launch, "if ! command webapp-manager; then notify-send -i applications-internet 'Please install the \"webapp-manager\" package' 'Linux Mint must be upgraded to 20.1 minimum'; fi")
		self.start.connect("clicked", self.launch, "gnome-session-properties")
		self.qt5ct.connect("clicked", self.launch, "notify-send -i qt5ct 'Please wait...' 'Qt5 Configuration Tool is starting'; qt5ct")
		self.box_buttons.pack_start(self.tweaks, True, True, 0)
		self.box_buttons.pack_start(self.apps, True, True, 0)
		self.box_buttons.pack_start(self.webapp, True, True, 0)
		self.box_buttons.pack_start(self.start, True, True, 0)
		self.box_buttons.pack_start(self.qt5ct, True, True, 0)

		self.commands = Gtk.Label()
		self.commands.set_markup("<b>- Firstly, to use a theme (login screen or Gnome), install-it by running:</b>\n<tt>gnome-custom-theme-install /usr/share/themes/YOUR_THEME GDM3_CSS</tt>\n\n<b>- To change the login screen theme, run:</b>\n<tt>gnome-custom-gdm3-theme YOUR_THEME</tt>\n\n<b>- To change your Gnome theme:</b>\n<i>Select 'Gnome (YOUR_THEME)' in the session list of the login screen</i>\n\n<b>- To tweak the login screen, run:</b>\n<tt>gnome-custom-gdm3-tweak YOUR_SETTINGS...</tt>\n\n<b>- To check the current login screen settings (theme and tweaks), run:</b>\n<tt>gnome-custom-gdm3-current</tt>")
		self.box.pack_start(self.commands, False, False, 0)


	def launch(self, widget, command):
		system(command + " &")

	def returntodraft(self, widget):
		global draft
		draft = True
		Gtk.main_quit()



admin = None
def get_admin():
	global admin
	if not admin:
		admin = spawn("pkexec bash")
		admin.expect([EOF, "#"])
		if not admin.isalive():
			admin = None
	return admin
draft = False
win = MainWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
win.destroy()
if admin:
	admin.sendline("exit")
	admin.expect(EOF)
if draft:
	windraft = DraftWindow()
	windraft.connect("destroy", Gtk.main_quit)
	windraft.show_all()
	Gtk.main()
	windraft.destroy()
