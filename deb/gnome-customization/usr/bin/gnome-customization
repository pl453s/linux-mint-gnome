#!/usr/bin/python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio
from os import system

class DraftWindow(Gtk.Window):
	def __init__(self):
		
		self.extensions_panel  = ["dash-to-panel@jderose9.github.com"]
		self.extensions_dock   = ["dash-to-dock@micxgx.gmail.com"]
		self.extensions_dash   = []
		self.extensions_show   = ["ding@rastersoft.com"]
		self.extensions_hide   = []
		self.extensions_full   = ["topindicatorapp@quiro9.com"]
		self.extensions_base   = []
		self.gsettings_panel   = ["org.gnome.desktop.wm.preferences button-layout appmenu:minimize,maximize,close"]
		self.gsettings_dock    = ["org.gnome.desktop.wm.preferences button-layout appmenu:minimize,maximize,close"]
		self.gsettings_dash    = ["org.gnome.desktop.wm.preferences button-layout appmenu:close"]
		self.gsettings_show    = []
		self.gsettings_hide    = []
		self.gsettings_full    = []
		self.gsettings_base    = []

		self.org_gnome_shell = Gio.Settings.new("org.gnome.shell")
		self.org_gnome_shell_extensions_user_theme = Gio.Settings.new("org.gnome.shell.extensions.user-theme")
		self.org_gnome_desktop_interface = Gio.Settings.new("org.gnome.desktop.interface")
		self.enabled_extensions = self.org_gnome_shell.get_strv("enabled-extensions")
		self.theme_gnome = self.org_gnome_shell_extensions_user_theme.get_string("name")
		self.theme_gtk = self.org_gnome_desktop_interface.get_string("gtk-theme")
		self.theme_icons = self.org_gnome_desktop_interface.get_string("icon-theme")
		self.theme_curs = self.org_gnome_desktop_interface.get_string("cursor-theme")
		self.style = "dash"
		self.icons = False
		self.tray = False
		if self.extensions_panel[0] in self.enabled_extensions:
			self.style = "panel"
		if self.extensions_dock[0] in self.enabled_extensions:
			self.style = "dock"
		if self.extensions_show[0] in self.enabled_extensions:
			self.icons = True
		if self.extensions_full[0] in self.enabled_extensions:
			self.tray = True
		
		Gtk.Window.__init__(self, title = "Customization")
		self.set_icon_name("preferences-color")
		self.set_position(Gtk.WindowPosition.CENTER)
		self.set_resizable(False)
		self.set_border_width(32)
		self.header = Gtk.HeaderBar()
		self.header.set_title("Customization")
		self.header.set_show_close_button(True)
		self.set_titlebar(self.header)
		self.box = Gtk.Box(spacing = 32)
		self.add(self.box)
		self.box_styles = Gtk.Box(spacing = 24, orientation = Gtk.Orientation.VERTICAL)
		self.box_options = Gtk.Box(spacing = 8, orientation = Gtk.Orientation.VERTICAL)
		self.box.pack_start(self.box_styles, True, False, 0)
		self.box.pack_start(Gtk.Separator(), True, False, 0)
		self.box.pack_start(self.box_options, True, False, 0)

		self.box_desktop = Gtk.Box(spacing = 8)
		self.box_indicator = Gtk.Box(spacing = 8)
		self.box_gnome = Gtk.Box(spacing = 8)
		self.box_gtk = Gtk.Box(spacing = 8)
		self.box_icons = Gtk.Box(spacing = 8)
		self.box_curs = Gtk.Box(spacing = 8)
		self.box_infos = Gtk.Box(spacing = 8)
		self.box_more = Gtk.Box(spacing = 8)
		self.box_options.pack_start(self.box_desktop, False, False, 0)
		self.box_options.pack_start(self.box_indicator, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_start(self.box_gnome, False, False, 0)
		self.box_options.pack_start(self.box_gtk, False, False, 0)
		self.box_options.pack_start(self.box_icons, False, False, 0)
		self.box_options.pack_start(self.box_curs, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_start(self.box_infos, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_end(self.box_more, False, False, 0)

		self.button_panel = Gtk.Button(label = "Panel style")
		self.button_dock = Gtk.Button(label = "Dock style")
		self.button_dash = Gtk.Button(label = "Dash style")
		self.button_panel.set_always_show_image(True)
		self.button_dock.set_always_show_image(True)
		self.button_dash.set_always_show_image(True)
		self.image_panel = Gtk.Image()
		self.image_dock = Gtk.Image()
		self.image_dash = Gtk.Image()
		self.image_panel.set_from_file("/usr/share/gnome-customization/panel.png")
		self.image_dock.set_from_file("/usr/share/gnome-customization/dock.png")
		self.image_dash.set_from_file("/usr/share/gnome-customization/dash.png")
		self.button_panel.set_image(self.image_panel)
		self.button_dock.set_image(self.image_dock)
		self.button_dash.set_image(self.image_dash)
		self.button_panel.set_image_position(Gtk.PositionType.TOP)
		self.button_dock.set_image_position(Gtk.PositionType.TOP)
		self.button_dash.set_image_position(Gtk.PositionType.TOP)
		if self.style == "panel":
			self.button_panel.get_style_context().add_class("suggested-action")
		if self.style == "dock":
			self.button_dock.get_style_context().add_class("suggested-action")
		if self.style == "dash":
			self.button_dash.get_style_context().add_class("suggested-action")
		self.button_panel.connect("clicked", self.action_panel)
		self.button_dock.connect("clicked", self.action_dock)
		self.button_dash.connect("clicked", self.action_dash)
		self.box_styles.pack_start(self.button_panel, True, False, 0)
		self.box_styles.pack_start(self.button_dock, True, False, 0)
		self.box_styles.pack_start(self.button_dash, True, False, 0)

		self.text_desktop = Gtk.Label()
		self.text_indicator = Gtk.Label()
		self.text_desktop.set_markup("Desktop Icons NG extension\n<small><i>To configure: Right clic on the desktop > Properties</i></small>")
		self.text_indicator.set_markup("Top Indicator App extension\n<small><i>Add third-party tray icons next to system tray icons</i></small>")
		self.switch_desktop = Gtk.Switch()
		self.switch_indicator = Gtk.Switch()
		if self.icons:
			self.switch_desktop.set_state(True)
		if self.tray:
			self.switch_indicator.set_state(True)
		self.switch_desktop.connect("state_set", self.action_desktop)
		self.switch_indicator.connect("state_set", self.action_indicator)
		self.box_desktop.pack_start(self.text_desktop, False, False, 0)
		self.box_indicator.pack_start(self.text_indicator, False, False, 0)
		self.box_desktop.pack_end(self.switch_desktop, False, False, 0)
		self.box_indicator.pack_end(self.switch_indicator, False, False, 0)

		self.text_gnome = Gtk.Label(label = "Gnome Shell theme (" + self.theme_gnome + ")")
		self.text_gtk = Gtk.Label(label = "Applications theme (" + self.theme_gtk + ")")
		self.text_icons = Gtk.Label(label = "Icons theme (" + self.theme_icons + ")")
		self.text_curs = Gtk.Label(label = "Cursor theme (" + self.theme_curs + ")")
		self.combo_gnome = Gtk.ComboBox()
		self.combo_gtk = Gtk.ComboBox()
		self.combo_icons = Gtk.ComboBox()
		self.combo_curs = Gtk.ComboBox()
		self.box_gnome.pack_start(self.text_gnome, False, False, 0)
		self.box_gtk.pack_start(self.text_gtk, False, False, 0)
		self.box_icons.pack_start(self.text_icons, False, False, 0)
		self.box_curs.pack_start(self.text_curs, False, False, 0)
		self.box_gnome.pack_end(self.combo_gnome, False, False, 0)
		self.box_gtk.pack_end(self.combo_gtk, False, False, 0)
		self.box_icons.pack_end(self.combo_icons, False, False, 0)
		self.box_curs.pack_end(self.combo_curs, False, False, 0)

		self.text_infos = Gtk.Label(label = "\n"
		"This is a first \"Customization\" GUI. In the future, this window\n"
		"should be splited in many tabs, allowing you to customize:\n\n"
		" - Styles and Gnome extensions\n - Desktop and GDM3 appearance\n"
		" - Add, hide and edit application icons\n"
		" - Add, hide and edit startup programs\n"
		" - User folders paths and names\n"
		" - QT5 and advanced Gnome settings\n"
		" - Plymouth theme and Grub theme\n")
		self.box_infos.pack_start(self.text_infos, False, False, 0)

		self.button_extensions = Gtk.Button(label = "Extensions")
		self.button_startup = Gtk.Button(label = "Startup")
		self.button_tweaks = Gtk.Button(label = "Tweaks")
		self.button_qt5ct = Gtk.Button(label = "QT5 (slow)")
		self.button_extensions.connect("clicked", self.action_launch, "gnome-extensions-app")
		self.button_startup.connect("clicked", self.action_launch, "gnome-session-properties")
		self.button_tweaks.connect("clicked", self.action_launch, "gnome-tweaks")
		self.button_qt5ct.connect("clicked", self.action_launch, "qt5ct")
		self.box_more.pack_start(self.button_extensions, True, True, 0)
		self.box_more.pack_start(self.button_startup, True, True, 0)
		self.box_more.pack_start(self.button_tweaks, True, True, 0)
		self.box_more.pack_start(self.button_qt5ct, True, True, 0)



	def extensions(self, extensions, enable):
		for extension in extensions:
			if enable:
				system("gnome-extensions enable " + extension)
			else:
				system("gnome-extensions disable " + extension)

	def gsettings(self, gsettings):
		for gsetting in gsettings:
			system("gsettings set " + gsetting)

	def action_panel(self, widget):
		self.button_panel.get_style_context().add_class("suggested-action")
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.extensions(self.extensions_dock, False)
		self.extensions(self.extensions_dash, False)
		self.extensions(self.extensions_panel, True)
		self.gsettings(self.gsettings_panel)

	def action_dock(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().add_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.extensions(self.extensions_panel, False)
		self.extensions(self.extensions_dash, False)
		self.extensions(self.extensions_dock, True)
		self.gsettings(self.gsettings_dock)

	def action_dash(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().add_class("suggested-action")
		self.extensions(self.extensions_panel, False)
		self.extensions(self.extensions_dock, False)
		self.extensions(self.extensions_dash, True)
		self.gsettings(self.gsettings_dash)

	def action_desktop(self, widget, state):
		if state:
			self.extensions(self.extensions_hide, False)
			self.extensions(self.extensions_show, True)
			self.gsettings(self.gsettings_show)
		else:
			self.extensions(self.extensions_show, False)
			self.extensions(self.extensions_hide, True)
			self.gsettings(self.gsettings_hide)

	def action_indicator(self, widget, state):
		if state:
			self.extensions(self.extensions_base, False)
			self.extensions(self.extensions_full, True)
			self.gsettings(self.gsettings_full)
		else:
			self.extensions(self.extensions_full, False)
			self.extensions(self.extensions_base, True)
			self.gsettings(self.gsettings_base)

	def action_launch(self, widget, command):
		system(command + " &")



win = DraftWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
