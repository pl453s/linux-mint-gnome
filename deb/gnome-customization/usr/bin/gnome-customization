#!/usr/bin/python3
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Handy', '0.0')
from gi.repository import Gtk, Gio
from os import system, getenv, listdir
from os.path import exists


class DraftWindow(Gtk.Window):
	def __init__(self):

		self.dashtopanel  = "dash-to-panel@jderose9.github.com"
		self.dashtodock   = "dash-to-dock@micxgx.gmail.com"
		self.desktopicons = "ding@rastersoft.com"
		self.topindicator = "topindicatorapp@quiro9.com"

		self.themes_gtk   = ["Adwaita"]
		self.themes_icons = ["Adwaita"]
		self.themes_curs  = ["Adwaita"]
		for path in ["/usr/share/themes/", "/usr/local/share/themes/", getenv("HOME") + "/.themes/", getenv("HOME") + "/.local/share/themes/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_gtk and not theme == "HighContrast" and not theme == "HighContrastInverse":
						self.themes_gtk.append(theme)
		for path in ["/usr/share/icons/", "/usr/local/share/icons/", getenv("HOME") + "/.icons/", getenv("HOME") + "/.local/share/icons/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_icons and not theme == "HighContrast" and not theme == "HighContrastInverse" \
					and not theme == "default" and not theme == "gnome" and not theme == "hicolor" and not theme == "locolor":
						self.themes_icons.append(theme)
					if exists(path + theme + "/cursor.theme") and not theme in self.themes_curs:
						self.themes_curs.append(theme)
		self.themes_gtk.sort()
		self.themes_icons.sort()
		self.themes_curs.sort()

		self.org_gnome_shell                  = Gio.Settings.new("org.gnome.shell")
		self.org_gnome_desktop_interface      = Gio.Settings.new("org.gnome.desktop.interface")
		self.org_gnome_desktop_wm_preferences = Gio.Settings.new("org.gnome.desktop.wm.preferences")
		self.enabled_extensions               = self.org_gnome_shell.get_strv("enabled-extensions")
		self.theme_gtk                        = self.org_gnome_desktop_interface.get_string("gtk-theme")
		self.theme_icons                      = self.org_gnome_desktop_interface.get_string("icon-theme")
		self.theme_curs                       = self.org_gnome_desktop_interface.get_string("cursor-theme")

		self.style = "dash"
		self.icons = False
		self.tray  = False
		if self.dashtopanel in self.enabled_extensions:
			self.style = "panel"
		if self.dashtodock in self.enabled_extensions:
			self.style = "dock"
		if self.desktopicons in self.enabled_extensions:
			self.icons = True
		if self.topindicator in self.enabled_extensions:
			self.tray = True

		Gtk.Window.__init__(self, title = "Customization")
		self.set_icon_name("gnome-color-manager")
		self.set_resizable(False)
		self.set_border_width(32)
		self.header = Gtk.HeaderBar()
		self.header.set_title("Customization")
		self.header.set_show_close_button(True)
		self.set_titlebar(self.header)
		self.box = Gtk.Box(spacing = 32)
		self.add(self.box)
		self.box_styles = Gtk.Box(spacing = 24, orientation = Gtk.Orientation.VERTICAL)
		self.box_options = Gtk.Box(spacing = 8, orientation = Gtk.Orientation.VERTICAL)
		self.box.pack_start(self.box_styles, True, False, 0)
		self.box.pack_start(Gtk.Separator(), True, False, 0)
		self.box.pack_start(self.box_options, True, False, 0)

		self.box_desktop   = Gtk.Box(spacing = 8)
		self.box_indicator = Gtk.Box(spacing = 8)
		self.box_gnome     = Gtk.Box(spacing = 8)
		self.box_gtk       = Gtk.Box(spacing = 8)
		self.box_icons     = Gtk.Box(spacing = 8)
		self.box_curs      = Gtk.Box(spacing = 8)
		self.box_infos     = Gtk.Box(spacing = 8)
		self.box_more      = Gtk.Box(spacing = 8)
		self.box_options.pack_start(self.box_desktop, False, False, 0)
		self.box_options.pack_start(self.box_indicator, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_start(self.box_gnome, False, False, 0)
		self.box_options.pack_start(self.box_gtk, False, False, 0)
		self.box_options.pack_start(self.box_icons, False, False, 0)
		self.box_options.pack_start(self.box_curs, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_start(self.box_infos, False, False, 0)
		self.box_options.pack_start(Gtk.Separator(), False, False, 0)
		self.box_options.pack_end(self.box_more, False, False, 0)

		self.button_panel = Gtk.Button(label = "Panel style")
		self.button_dock  = Gtk.Button(label = "Dock style")
		self.button_dash  = Gtk.Button(label = "Dash style")
		self.button_panel.set_always_show_image(True)
		self.button_dock.set_always_show_image(True)
		self.button_dash.set_always_show_image(True)
		self.image_panel = Gtk.Image()
		self.image_dock  = Gtk.Image()
		self.image_dash  = Gtk.Image()
		self.image_panel.set_from_file("/usr/share/gnome-customization/panel.png")
		self.image_dock.set_from_file("/usr/share/gnome-customization/dock.png")
		self.image_dash.set_from_file("/usr/share/gnome-customization/dash.png")
		self.button_panel.set_image(self.image_panel)
		self.button_dock.set_image(self.image_dock)
		self.button_dash.set_image(self.image_dash)
		self.button_panel.set_image_position(Gtk.PositionType.TOP)
		self.button_dock.set_image_position(Gtk.PositionType.TOP)
		self.button_dash.set_image_position(Gtk.PositionType.TOP)
		if self.style == "panel":
			self.button_panel.get_style_context().add_class("suggested-action")
		if self.style == "dock":
			self.button_dock.get_style_context().add_class("suggested-action")
		if self.style == "dash":
			self.button_dash.get_style_context().add_class("suggested-action")
		self.button_panel.connect("clicked", self.action_panel)
		self.button_dock.connect("clicked", self.action_dock)
		self.button_dash.connect("clicked", self.action_dash)
		self.box_styles.pack_start(self.button_panel, True, False, 0)
		self.box_styles.pack_start(self.button_dock, True, False, 0)
		self.box_styles.pack_start(self.button_dash, True, False, 0)

		self.text_desktop   = Gtk.Label()
		self.text_indicator = Gtk.Label()
		self.text_desktop.set_markup("Desktop Icons NG extension\n<small><i>To configure: Right clic on the desktop > Properties</i></small>")
		self.text_indicator.set_markup("Top Indicator App extension\n<small><i>Add third-party tray icons next to system tray icons</i></small>")
		self.switch_desktop   = Gtk.Switch()
		self.switch_indicator = Gtk.Switch()
		if self.icons:
			self.switch_desktop.set_state(True)
		if self.tray:
			self.switch_indicator.set_state(True)
		self.switch_desktop.connect("state_set", self.action_desktop)
		self.switch_indicator.connect("state_set", self.action_indicator)
		self.box_desktop.pack_start(self.text_desktop, False, False, 0)
		self.box_indicator.pack_start(self.text_indicator, False, False, 0)
		self.box_desktop.pack_end(self.switch_desktop, False, False, 0)
		self.box_indicator.pack_end(self.switch_indicator, False, False, 0)

		self.text_gnome  = Gtk.Label(label = "Gnome theme")
		self.text_gtk    = Gtk.Label(label = "GTK theme")
		self.text_icons  = Gtk.Label(label = "Icons theme")
		self.text_curs   = Gtk.Label(label = "Cursor theme")
		self.info_gnome  = Gtk.Label()
		self.combo_gtk   = Gtk.ComboBoxText()
		self.combo_icons = Gtk.ComboBoxText()
		self.combo_curs  = Gtk.ComboBoxText()
		self.info_gnome.set_markup("<i>Select a Gnome theme on the login screen\n<small>Use 'gnome-custom-theme-install' to install a theme</small></i>")
		self.combo_gtk.set_property("width-request", 256)
		self.combo_icons.set_property("width-request", 256)
		self.combo_curs.set_property("width-request", 256)
		for theme in self.themes_gtk:
			self.combo_gtk.append_text(theme)
		for theme in self.themes_icons:
			self.combo_icons.append_text(theme)
		for theme in self.themes_curs:
			self.combo_curs.append_text(theme)
		if self.theme_gtk in self.themes_gtk:
			self.combo_gtk.set_active(self.themes_gtk.index(self.theme_gtk))
		if self.theme_icons in self.themes_icons:
			self.combo_icons.set_active(self.themes_icons.index(self.theme_icons))
		if self.theme_curs in self.themes_curs:
			self.combo_curs.set_active(self.themes_curs.index(self.theme_curs))
		self.combo_gtk.connect("changed", self.action_gtk)
		self.combo_icons.connect("changed", self.action_icons)
		self.combo_curs.connect("changed", self.action_curs)
		self.box_gnome.pack_start(self.text_gnome, False, False, 0)
		self.box_gtk.pack_start(self.text_gtk, False, False, 0)
		self.box_icons.pack_start(self.text_icons, False, False, 0)
		self.box_curs.pack_start(self.text_curs, False, False, 0)
		self.box_gnome.pack_end(self.info_gnome, False, False, 0)
		self.box_gtk.pack_end(self.combo_gtk, False, False, 0)
		self.box_icons.pack_end(self.combo_icons, False, False, 0)
		self.box_curs.pack_end(self.combo_curs, False, False, 0)

		self.text_infos = Gtk.Label(label = "\n"
		"This is a first \"Customization\" GUI. In the future, this window\n"
		"should be splited in many tabs, allowing you to customize:\n\n"
		" - Styles and Gnome extensions\n - Desktop and GDM3 appearance\n"
		" - Add, hide and edit application icons\n"
		" - Add, hide and edit startup programs\n"
		" - User folders paths and names\n"
		" - Qt5 and advanced Gnome settings\n"
		" - Plymouth theme and Grub theme\n")
		self.box_infos.pack_start(self.text_infos, False, False, 0)

		self.button_apps   = Gtk.Button(label = "Applications")
		self.button_start  = Gtk.Button(label = "Startup")
		self.button_tweaks = Gtk.Button(label = "Tweaks")
		self.button_qt5ct  = Gtk.Button(label = "Qt5 CT")
		self.button_apps.connect("clicked", self.action_launch, "menulibre")
		self.button_start.connect("clicked", self.action_launch, "gnome-session-properties")
		self.button_tweaks.connect("clicked", self.action_launch, "gnome-tweaks")
		self.button_qt5ct.connect("clicked", self.action_launch, "notify-send -i qt5ct 'Please wait...' 'Qt5 Configuration Tool is starting' ; qt5ct")
		self.box_more.pack_start(self.button_apps, True, True, 0)
		self.box_more.pack_start(self.button_start, True, True, 0)
		self.box_more.pack_start(self.button_tweaks, True, True, 0)
		self.box_more.pack_start(self.button_qt5ct, True, True, 0)


	def action_panel(self, widget):
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.button_panel.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + self.dashtodock)
		system("gnome-extensions enable " + self.dashtopanel)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def action_dock(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + self.dashtopanel)
		system("gnome-extensions enable " + self.dashtodock)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def action_dash(self, widget):
		self.button_panel.get_style_context().remove_class("suggested-action")
		self.button_dock.get_style_context().remove_class("suggested-action")
		self.button_dash.get_style_context().add_class("suggested-action")
		system("gnome-extensions disable " + self.dashtodock)
		system("gnome-extensions disable " + self.dashtopanel)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:close")

	def action_desktop(self, widget, state):
		if state:
			system("gnome-extensions enable " + self.desktopicons)
		else:
			system("gnome-extensions disable " + self.desktopicons)

	def action_indicator(self, widget, state):
		if state:
			system("gnome-extensions enable " + self.topindicator)
		else:
			system("gnome-extensions disable " + self.topindicator)

	def action_gtk(self, widget):
		self.org_gnome_desktop_interface.set_string("gtk-theme", widget.get_active_text())

	def action_icons(self, widget):
		self.org_gnome_desktop_interface.set_string("icon-theme", widget.get_active_text())

	def action_curs(self, widget):
		self.org_gnome_desktop_interface.set_string("cursor-theme", widget.get_active_text())

	def action_launch(self, widget, command):
		system(command + " &")


class MainWindow(Gtk.Window):
	def __init__(self):
		self.name = "Customization (BETA)"
		Gtk.Window.__init__(self, title = self.name)
		self.set_icon_name("gnome-color-manager")
		self.box = Gtk.Box()
		self.add(self.box)

		self.header = Gtk.Box()
		self.lheader = Gtk.Box()
		self.rheader = Gtk.Stack()

		self.title = Gtk.HeaderBar(title = self.name)
		self.lheader.pack_start(self.title, True, True, 0)
		self.lheader.pack_start(Gtk.Separator(), False, False, 0)

		self.header.pack_start(self.lheader, False, False, 0)
		self.header.pack_start(self.rheader, True, True, 0)

		self.set_titlebar(self.header)
		self.panel = Gtk.Box()
		self.stack = Gtk.Stack()
		self.list = Gtk.ListBox(width_request = 200)
		self.list.connect("row-selected", self.switch_tab)
		self.panel.pack_start(self.list, True, True, 0)
		self.panel.pack_start(Gtk.Separator(), False, False, 0)
		for tab in [ExtensionsTab(), DesktopTab(), LoginScreenTab(), MoreTab()]:
			row = Gtk.ListBoxRow()
			row.add(Gtk.Label(label = tab.name, xalign = 0.0, margin = 10))
			self.list.insert(row, -1)
			tab.header.set_title(tab.name)
			tab.header.set_show_close_button(True)
			self.rheader.add_named(tab.header, tab.name)
			self.stack.add_named(tab, tab.name)
		self.box.pack_start(self.panel, False, False, 0)
		self.box.pack_start(self.stack, True, True, 0)

		self.lsize = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.HORIZONTAL)
		self.lsize.add_widget(self.lheader)
		self.lsize.add_widget(self.panel)

		self.rsize = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.HORIZONTAL)
		self.rsize.add_widget(self.rheader)
		self.rsize.add_widget(self.stack)

	def switch_tab(self, widget, subwidget):
		name = subwidget.get_child().get_text()
		self.rheader.set_visible_child_name(name)
		self.stack.set_visible_child_name(name)



class ExtensionsTab(Gtk.Box):
	def __init__(self):
		self.name = "Extensions"
		self.header = Gtk.HeaderBar()
		self.header_style_settings = Gtk.Button(label = "Dock Settings")
		#self.header_style_settings.connect("clicked", self.BUTTON)
		self.header_circuit_breaker = Gtk.Switch()
		self.header_circuit_breaker.set_state(True)
		#self.header_circuit_breaker.connect("state_set", self.SWITCH)
		self.header.pack_start(self.header_style_settings)
		self.header.pack_end(self.header_circuit_breaker)
		Gtk.Box.__init__(self, margin = 30, spacing = 30, orientation = Gtk.Orientation.VERTICAL)
		self.box = Gtk.Box(spacing = 30)
		self.pack_start(self.box, True, True, 0)

		self.box_styles = Gtk.Box(spacing = 30, orientation = Gtk.Orientation.VERTICAL)
		self.box_others = Gtk.Box(spacing = 30, orientation = Gtk.Orientation.VERTICAL)
		self.box.pack_start(self.box_styles, False, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.box_others, False, False, 0)

		self.button_panel = Gtk.Button(label = "Panel style", image = Gtk.Image(file = "/usr/share/gnome-customization/panel.png"))
		self.button_dock = Gtk.Button(label = "Dock style", image = Gtk.Image(file = "/usr/share/gnome-customization/dock.png"))
		self.button_dash = Gtk.Button(label = "Dash style", image = Gtk.Image(file = "/usr/share/gnome-customization/dash.png"))
		self.button_panel.set_always_show_image(True)
		self.button_dock.set_always_show_image(True)
		self.button_dash.set_always_show_image(True)
		self.button_panel.set_image_position(Gtk.PositionType.TOP)
		self.button_dock.set_image_position(Gtk.PositionType.TOP)
		self.button_dash.set_image_position(Gtk.PositionType.TOP)
		#if self.style == "panel":
		#	self.button_panel.get_style_context().add_class("suggested-action")
		#if self.style == "dock":
		#	self.button_dock.get_style_context().add_class("suggested-action")
		#if self.style == "dash":
		#	self.button_dash.get_style_context().add_class("suggested-action")
		#self.button_panel.connect("clicked", self.action_panel)
		#self.button_dock.connect("clicked", self.action_dock)
		#self.button_dash.connect("clicked", self.action_dash)
		self.box_styles.pack_start(self.button_panel, False, False, 0)
		self.box_styles.pack_start(self.button_dock, False, False, 0)
		self.box_styles.pack_start(self.button_dash, False, False, 0)


class DesktopTab(Gtk.Box):
	def __init__(self):
		self.name = "Desktop (not ready)"
		self.header = Gtk.HeaderBar()
		Gtk.Box.__init__(self, margin = 30, spacing = 30, orientation = Gtk.Orientation.VERTICAL)
		self.box = Gtk.Box(spacing = 30)
		self.pack_start(self.box, True, True, 0)

		self.box.pack_start(Gtk.Label(label = "DESKTOP!"), False, False, 0)


class LoginScreenTab(Gtk.Box):
	def __init__(self):
		self.name = "Login screen (not ready)"
		self.header = Gtk.HeaderBar()
		self.header_unlock = Gtk.Button(label = "Unlock")
		self.header.pack_end(self.header_unlock)
		Gtk.Box.__init__(self, margin = 30, spacing = 30, orientation = Gtk.Orientation.VERTICAL)
		self.box = Gtk.Box(spacing = 30)
		self.pack_start(self.box, True, True, 0)

		self.box.pack_start(Gtk.Label(label = "LOGINSCREEN!"), False, False, 0)


class MoreTab(Gtk.Box):
	def __init__(self):
		self.name = "More"
		self.header = Gtk.HeaderBar()
		Gtk.Box.__init__(self, margin = 30, spacing = 30, orientation = Gtk.Orientation.VERTICAL)
		self.box = Gtk.Box(spacing = 30)
		self.pack_start(self.box, True, True, 0)

		self.box_buttons = Gtk.Box(spacing = 15, orientation = Gtk.Orientation.VERTICAL)
		self.box.pack_start(self.box_buttons, False, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(Gtk.Label(label = ""), False, False, 0)

		self.draft  = Gtk.Button(label = "This is a BETA version!\nReturn to the old GUI")
		self.tweaks = Gtk.Button(label = "Gnome Tweaks Mini")
		self.apps   = Gtk.Button(label = "Applications list editor")
		self.webapp = Gtk.Button(label = "Web Apps. Manager")
		self.start  = Gtk.Button(label = "Startup Applications")
		self.qt5ct  = Gtk.Button(label = "Qt5 Configuration Tool")
		self.themes = Gtk.Button(label = "Gnome-Look.org")
		self.extens = Gtk.Button(label = "Gnome Extensions")
		self.github = Gtk.Button(label = "Linux Mint Gnome\nGitHub project page")
		self.draft.connect("clicked", self.returntodraft)
		self.tweaks.connect("clicked", self.launch, "gnome-tweaks")
		self.apps.connect("clicked", self.launch, "menulibre")
		self.webapp.connect("clicked", self.launch, "if ! command -v webapp-manager; then notify-send -i applications-internet 'Please install the \"webapp-manager\" package' 'Linux Mint must be upgraded to 20.1 minimum'; fi")
		self.start.connect("clicked", self.launch, "gnome-session-properties")
		self.qt5ct.connect("clicked", self.launch, "notify-send -i qt5ct 'Please wait...' 'Qt5 Configuration Tool is starting'; qt5ct")
		self.themes.connect("clicked", self.launch, "xdg-open https://gnome-look.org")
		self.extens.connect("clicked", self.launch, "xdg-open https://extensions.gnome.org")
		self.github.connect("clicked", self.launch, "xdg-open https://github.com/pl453s/linux-mint-gnome")
		self.box_buttons.pack_start(self.draft, False, False, 0)
		self.box_buttons.pack_start(Gtk.Separator(), False, False, 0)
		self.box_buttons.pack_start(Gtk.Label(label = "Additional tools:"), False, False, 0)
		self.box_buttons.pack_start(self.tweaks, False, False, 0)
		self.box_buttons.pack_start(self.apps, False, False, 0)
		self.box_buttons.pack_start(self.webapp, False, False, 0)
		self.box_buttons.pack_start(self.start, False, False, 0)
		self.box_buttons.pack_start(self.qt5ct, False, False, 0)
		self.box_buttons.pack_start(Gtk.Separator(), False, False, 0)
		self.box_buttons.pack_start(Gtk.Label(label = "Web links:"), False, False, 0)
		self.box_buttons.pack_start(self.themes, False, False, 0)
		self.box_buttons.pack_start(self.extens, False, False, 0)
		self.box_buttons.pack_start(self.github, False, False, 0)


	def launch(self, widget, command):
		system(command + " &")

	def returntodraft(self, widget):
		global launchdraft
		launchdraft = True
		Gtk.main_quit()

launchdraft = False
win = MainWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
win.destroy()
if launchdraft:
	windraft = DraftWindow()
	windraft.connect("destroy", Gtk.main_quit)
	windraft.show_all()
	Gtk.main()
	windraft.destroy()
