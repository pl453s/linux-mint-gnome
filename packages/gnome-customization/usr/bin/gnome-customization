#!/usr/bin/python3
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Handy', '0.0')
from gi.repository import Gtk, Gio, Handy, Pango
from os import system, getenv, listdir, readlink
from os.path import exists
from pexpect import runu, spawnu, EOF
dashtopanel  = "dash-to-panel@jderose9.github.com"
dashtodock   = "dash-to-dock@micxgx.gmail.com"
desktopicons = "ding@rastersoft.com"
topindicator = "topindicatorapp@quiro9.com"



class MainWindow(Gtk.Window):
	def __init__(self):
		self.name = "Customization"
		Gtk.Window.__init__(self, title = self.name)
		self.set_icon_name("gnome-color-manager")
		self.body = Gtk.Box()
		self.add(self.body)
		self.bar = Handy.TitleBar()
		self.head = Handy.Leaflet()
		self.head.set_transition_type(Handy.LeafletTransitionType.SLIDE)
		self.lhead = Gtk.HeaderBar(title = self.name)
		self.rhead = Gtk.Stack()
		separator = Gtk.Separator()
		separator.get_style_context().add_class("sidebar")
		self.head.add(self.lhead)
		self.head.add(separator)
		self.head.add(self.rhead)
		self.bar.add(self.head)
		self.set_titlebar(self.bar)

		self.lbody = Gtk.ListBox(width_request = 200)
		self.lbody.connect("row-selected", self.switch_tab)
		self.rbody = Gtk.Stack()
		for tab in [ExtensionsTab(), DesktopTab(), LoginScreenTab(), MoreTab()]:
			row = Gtk.ListBoxRow()
			row.add(Gtk.Label(label = tab.name, xalign = 0.0, margin = 10))
			self.lbody.insert(row, -1)
			tab.header.props.hexpand = True
			tab.header.props.show_close_button = True
			tab.header.props.title = tab.name
			self.rhead.add_named(tab.header, tab.name)
			self.rbody.add_named(tab, tab.name)
		separator = Gtk.Separator()
		separator.get_style_context().add_class("sidebar")
		self.body.pack_start(self.lbody, False, False, 0)
		self.body.pack_start(separator, False, False, 0)
		self.body.pack_start(self.rbody, True, True, 0)
		self.lsize = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.HORIZONTAL)
		self.lsize.add_widget(self.lhead)
		self.lsize.add_widget(self.lbody)
		self.rsize = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.HORIZONTAL)
		self.rsize.add_widget(self.rhead)
		self.rsize.add_widget(self.rbody)


	def switch_tab(self, widget, subwidget):
		name = subwidget.get_child().get_text()
		self.rhead.set_visible_child_name(name)
		self.rbody.set_visible_child_name(name)



class ExtensionsTab(Gtk.Box):
	def __init__(self):
		self.org_gnome_shell                  = Gio.Settings.new("org.gnome.shell")
		self.org_gnome_desktop_wm_preferences = Gio.Settings.new("org.gnome.desktop.wm.preferences")

		self.name = "Extensions"
		self.header = Gtk.HeaderBar()
		self.header_popover = Gtk.Popover()
		label = Gtk.Label(label = "<b>Warning: Disable all extensions if you experience system issues.</b>\n\nTo add a Gnome extension, install it with your package manager or\nmanually browse, download and install it from <a href='https://extensions.gnome.org'>extensions.gnome.org</a>.\n\nMake sure the extension folder name matches its UUID. You can install\nan extension directly from your browser with the appropriate addon.\n\nValid paths to place extensions are:\n - <tt><a href='file:///usr/share/gnome-shell/extensions'>/usr/share/gnome-shell/extensions</a></tt>\n - <tt><a href='file:///home/" + getenv("USER") + "/.local/share/gnome-shell/extensions'>/home/" + getenv("USER") + "/.local/share/gnome-shell/extensions</a></tt>", use_markup = True, margin = 20)
		label.show_all()
		self.header_popover.add(label)
		self.header_info = Gtk.MenuButton(image = Gtk.Image(icon_name = "dialog-information-symbolic"), popover = self.header_popover)
		self.header_switch = Gtk.Switch(state = not self.org_gnome_shell.get_boolean("disable-user-extensions"))
		self.header_switch.connect("state-set", self.switchall)
		self.header.pack_start(self.header_info)
		self.header.pack_end(self.header_switch)
		Gtk.Box.__init__(self, margin = 20, spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box = Gtk.Box(spacing = 20)
		self.pack_start(self.box, True, True, 0)

		self.box_styles = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.scroll_others = Gtk.ScrolledWindow(min_content_width = 300, max_content_width = 300)
		self.box.pack_start(self.box_styles, True, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.scroll_others, True, False, 0)
		self.box_others = Gtk.Box(spacing = 10, orientation = Gtk.Orientation.VERTICAL, margin_end = 20, margin_top = 10, margin_bottom = 10)
		self.scroll_others.add(self.box_others)
		self.size_others = Gtk.SizeGroup(mode = Gtk.SizeGroupMode.VERTICAL)

		self.extensions_list  = runu("gnome-extensions list").split("\n")
		self.extensions_info  = runu("gnome-extensions list --details").split("\n")
		self.extensions_pref  = runu("gnome-extensions list --prefs").split("\n")
		self.extensions_enab  = self.org_gnome_shell.get_strv("enabled-extensions")
		self.extensions_disa  = self.org_gnome_shell.get_strv("disabled-extensions")
		self.dashtopanel_uuid = None
		self.dashtopanel_pref = None
		self.dashtopanel_enab = None
		self.dashtodock_uuid  = None
		self.dashtodock_pref  = None
		self.dashtodock_enab  = None
		self.extensions       = []
		for extension in self.extensions_list:
			if extension:
				uuid = extension[:-1]
				name = self.extensions_info[self.extensions_info.index(extension)+1][7:-1]
				pref = extension in self.extensions_pref
				enab = uuid in self.extensions_enab and uuid not in self.extensions_disa
				if uuid == dashtopanel:
					self.dashtopanel_uuid = uuid
					self.dashtopanel_pref = pref
					self.dashtopanel_enab = enab
				elif uuid == dashtodock:
					self.dashtodock_uuid = uuid
					self.dashtodock_pref = pref
					self.dashtodock_enab = enab
				else:
					box = Gtk.Box(spacing = 10)
					label = Gtk.Label(label = name, xalign = 0.0, ellipsize = Pango.EllipsizeMode.END)
					box.pack_start(label, True, True, 0)
					subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
					switch = Gtk.Switch(state = enab)
					switch.connect("state-set", self.switch, uuid)
					subbox.pack_start(switch, True, False, 0)
					box.pack_end(subbox, False, False, 0)
					if pref:
						config = Gtk.Button(image = Gtk.Image(icon_name = "emblem-system-symbolic"))
						config.connect("clicked", self.launch, "gnome-extensions prefs " + uuid)
						box.pack_end(config, False, False, 0)
					self.extensions.append([name, box])

		if self.dashtopanel_uuid:
			box = Gtk.Box(spacing = 20)
			self.panel = Gtk.Button(label = "Panel style", image = Gtk.Image(file = "/usr/share/gnome-customization/panel.png"), always_show_image = True, image_position = Gtk.PositionType.TOP)
			self.panel.connect("clicked", self.topanel)
			if self.dashtopanel_enab:
				self.panel.get_style_context().add_class("suggested-action")
			subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
			if self.dashtopanel_pref:
				config = Gtk.Button(image = Gtk.Image(icon_name = "emblem-system-symbolic"))
				config.connect("clicked", self.launch, "gnome-extensions prefs " + self.dashtopanel_uuid)
				subbox.pack_start(config, True, False, 0)
			box.pack_start(self.panel, False, False, 0)
			box.pack_start(subbox, False, False, 0)
			self.box_styles.pack_start(box, False, False, 0)
		if self.dashtodock_uuid:
			box = Gtk.Box(spacing = 20)
			self.dock = Gtk.Button(label = "Dock style", image = Gtk.Image(file = "/usr/share/gnome-customization/dock.png"), always_show_image = True, image_position = Gtk.PositionType.TOP)
			self.dock.connect("clicked", self.todock)
			if self.dashtodock_enab:
				self.dock.get_style_context().add_class("suggested-action")
			subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
			if self.dashtodock_pref:
				config = Gtk.Button(image = Gtk.Image(icon_name = "emblem-system-symbolic"))
				config.connect("clicked", self.launch, "gnome-extensions prefs " + self.dashtodock_uuid)
				subbox.pack_start(config, True, False, 0)
			box.pack_start(self.dock, False, False, 0)
			box.pack_start(subbox, False, False, 0)
			self.box_styles.pack_start(box, False, False, 0)
		box = Gtk.Box(spacing = 20)
		self.dash = Gtk.Button(label = "Dash style", image = Gtk.Image(file = "/usr/share/gnome-customization/dash.png"), always_show_image = True, image_position = Gtk.PositionType.TOP)
		self.dash.connect("clicked", self.todash)
		if not self.dashtopanel_enab and not self.dashtodock_enab:
			self.dash.get_style_context().add_class("suggested-action")
		subbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
		box.pack_start(self.dash, False, False, 0)
		box.pack_start(subbox, False, False, 0)
		self.box_styles.pack_start(box, False, False, 0)

		if self.extensions:
			self.extensions.sort()
			for extension in self.extensions:
				self.size_others.add_widget(extension[1])
				self.box_others.pack_start(extension[1], False, False, 0)
				separator = Gtk.Separator()
				self.box_others.pack_start(separator, False, False, 0)
			separator.destroy()
		else:
			box = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
			box.pack_start(Gtk.Image(icon_name = "org.gnome.Extensions-symbolic", icon_size = 6), False, False, 0)
			box.pack_start(Gtk.Label(label = "<big><b>You have no other\nextension installed</b></big>", use_markup = True, justify = Gtk.Justification.CENTER), False, False, 0)
			self.box_others.pack_start(box, True, False, 0)


	def topanel(self, widget):
		if self.dashtodock_uuid:
			self.dock.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtodock_uuid)
		self.dash.get_style_context().remove_class("suggested-action")
		self.panel.get_style_context().add_class("suggested-action")
		system("gnome-extensions enable " + self.dashtopanel_uuid)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def todock(self, widget):
		if self.dashtopanel_uuid:
			self.panel.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtopanel_uuid)
		self.dash.get_style_context().remove_class("suggested-action")
		self.dock.get_style_context().add_class("suggested-action")
		system("gnome-extensions enable " + self.dashtodock_uuid)
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:minimize,maximize,close")

	def todash(self, widget):
		if self.dashtopanel_uuid:
			self.panel.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtopanel_uuid)
		if self.dashtodock_uuid:
			self.dock.get_style_context().remove_class("suggested-action")
			system("gnome-extensions disable " + self.dashtodock_uuid)
		self.dash.get_style_context().add_class("suggested-action")
		self.org_gnome_desktop_wm_preferences.set_string("button-layout", "appmenu:close")

	def switchall(self, widget, state):
		self.org_gnome_shell.set_boolean("disable-user-extensions", not state)

	def switch(self, widget, state, uuid):
		if state:
			system("gnome-extensions enable " + uuid)
		else:
			system("gnome-extensions disable " + uuid)

	def launch(self, widget, command):
		system(command + " &")



class DesktopTab(Gtk.Box):
	def __init__(self):
		self.org_gnome_desktop_interface      = Gio.Settings.new("org.gnome.desktop.interface")
		self.org_gnome_desktop_calendar       = Gio.Settings.new("org.gnome.desktop.calendar")
		self.org_gnome_desktop_sound          = Gio.Settings.new("org.gnome.desktop.sound")
		self.org_gnome_desktop_wm_preferences = Gio.Settings.new("org.gnome.desktop.wm.preferences")
		self.org_gnome_mutter                 = Gio.Settings.new("org.gnome.mutter")
		file = open("/usr/share/gnome-session/sessions/" + getenv("XDG_SESSION_DESKTOP") + ".session", "r")
		self.theme_gnome = file.readlines()[1][12:-2]
		if not self.theme_gnome:
			self.theme_gnome = "(Default)"
		file.close()
		self.theme_gtk    = self.org_gnome_desktop_interface.get_string("gtk-theme")
		self.theme_icons  = self.org_gnome_desktop_interface.get_string("icon-theme")
		self.theme_curs   = self.org_gnome_desktop_interface.get_string("cursor-theme")
		self.themes_gtk   = ["Adwaita"]
		self.themes_icons = ["Adwaita"]
		self.themes_curs  = ["Adwaita"]
		for path in ["/usr/share/themes/", "/usr/local/share/themes/", getenv("HOME") + "/.themes/", getenv("HOME") + "/.local/share/themes/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_gtk and not theme == "HighContrast" and not theme == "HighContrastInverse":
						self.themes_gtk.append(theme)
		for path in ["/usr/share/icons/", "/usr/local/share/icons/", getenv("HOME") + "/.icons/", getenv("HOME") + "/.local/share/icons/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_icons and not theme == "HighContrast" and not theme == "HighContrastInverse" \
					and not theme == "default" and not theme == "gnome" and not theme == "hicolor" and not theme == "locolor":
						self.themes_icons.append(theme)
					if exists(path + theme + "/cursor.theme") and not theme in self.themes_curs:
						self.themes_curs.append(theme)
		self.themes_gtk.sort()
		self.themes_icons.sort()
		self.themes_curs.sort()

		self.name = "Desktop"
		self.header = Gtk.HeaderBar()
		self.header_popover = Gtk.Popover()
		label = Gtk.Label(label = "To add a Gnome, GTK, icons or cursors theme, install it with your package\nmanager or manually browse, download and install it from <a href='https://gnome-look.org'>gnome-look.org</a>.\n\nValid paths to place Gnome and GTK themes are:\n - <tt><a href='file:///usr/share/themes'>/usr/share/themes</a></tt>\n - <tt><a href='file:///home/" + getenv("USER") + "/.themes'>/home/" + getenv("USER") + "/.themes</a></tt>\n\nValid paths to place icons and cursors themes are:\n - <tt><a href='file:///usr/share/icons'>/usr/share/icons</a></tt>\n - <tt><a href='file:///home/" + getenv("USER") + "/.icons'>/home/" + getenv("USER") + "/.icons</a></tt>", use_markup = True, margin = 20)
		label.show_all()
		self.header_popover.add(label)
		self.header_info = Gtk.MenuButton(image = Gtk.Image(icon_name = "dialog-information-symbolic"), popover = self.header_popover)
		self.header.pack_start(self.header_info)
		Gtk.Box.__init__(self, margin = 20, spacing = 20)
		self.box = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.pack_start(self.box, True, True, 0)

		self.box0 = Gtk.Box(spacing = 20)
		self.box1 = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box2 = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box3 = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box0.pack_start(self.box1, True, True, 0)
		self.box0.pack_start(Gtk.Separator(), False, False, 0)
		self.box0.pack_start(self.box2, True, True, 0)
		self.box.pack_start(self.box0, False, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.box3, False, False, 0)

		self.box_gnome = Gtk.Box(spacing = 10)
		self.box_gtk   = Gtk.Box(spacing = 10)
		self.box_icons = Gtk.Box(spacing = 10)
		self.box_curs  = Gtk.Box(spacing = 10)
		self.box_font  = Gtk.Box(spacing = 10)
		self.box_anim  = Gtk.Box(spacing = 10)
		self.box_weekn = Gtk.Box(spacing = 10)
		self.box_weekd = Gtk.Box(spacing = 10)
		self.box_date  = Gtk.Box(spacing = 10)
		self.box_sec   = Gtk.Box(spacing = 10)
		self.box_bat   = Gtk.Box(spacing = 10)
		self.box_vol   = Gtk.Box(spacing = 10)
		self.box_hot   = Gtk.Box(spacing = 10)
		self.box_work  = Gtk.Box(spacing = 10)
		self.box_span  = Gtk.Box(spacing = 10)

		self.btn_gnome = Gtk.Button(label = self.theme_gnome)
		self.btn_gtk   = Gtk.ComboBoxText(width_request = 200)
		self.btn_icons = Gtk.ComboBoxText(width_request = 200)
		self.btn_curs  = Gtk.ComboBoxText(width_request = 200)
		self.btn_fontr = Gtk.Button(image = Gtk.Image(icon_name = "edit-undo-symbolic"))
		self.btn_font  = Gtk.FontButton(font = self.org_gnome_desktop_interface.get_string("font-name"))
		self.btn_anim  = Gtk.Switch(state = self.org_gnome_desktop_interface.get_boolean("enable-animations"))
		self.btn_weekn = Gtk.Switch(state = self.org_gnome_desktop_calendar.get_boolean("show-weekdate"))
		self.btn_weekd = Gtk.Switch(state = self.org_gnome_desktop_interface.get_boolean("clock-show-weekday"))
		self.btn_date  = Gtk.Switch(state = self.org_gnome_desktop_interface.get_boolean("clock-show-date"))
		self.btn_sec   = Gtk.Switch(state = self.org_gnome_desktop_interface.get_boolean("clock-show-seconds"))
		self.btn_bat   = Gtk.Switch(state = self.org_gnome_desktop_interface.get_boolean("show-battery-percentage"))
		self.btn_vol   = Gtk.Switch(state = self.org_gnome_desktop_sound.get_boolean("allow-volume-above-100-percent"))
		self.btn_hot   = Gtk.Switch(state = self.org_gnome_desktop_interface.get_boolean("enable-hot-corners"))
		self.btn_work  = Gtk.SpinButton()
		self.btn_span  = Gtk.Switch(state = self.org_gnome_mutter.get_boolean("workspaces-only-on-primary"))

		for theme in self.themes_gtk:
			self.btn_gtk.append_text(theme)
		for theme in self.themes_icons:
			self.btn_icons.append_text(theme)
		for theme in self.themes_curs:
			self.btn_curs.append_text(theme)
		if self.theme_gtk in self.themes_gtk:
			self.btn_gtk.set_active(self.themes_gtk.index(self.theme_gtk))
		if self.theme_icons in self.themes_icons:
			self.btn_icons.set_active(self.themes_icons.index(self.theme_icons))
		if self.theme_curs in self.themes_curs:
			self.btn_curs.set_active(self.themes_curs.index(self.theme_curs))
		self.btn_work.set_range(0, 36)
		self.btn_work.set_increments(1, 1)
		self.btn_work.set_value(0)
		if not self.org_gnome_mutter.get_boolean("dynamic-workspaces"):
			self.btn_work.set_value(self.org_gnome_desktop_wm_preferences.get_int("num-workspaces"))

		self.btn_gnome.connect("clicked", self.action_gnome)
		self.btn_gtk.connect("changed", self.action_combo, self.org_gnome_desktop_interface, "gtk-theme")
		self.btn_icons.connect("changed", self.action_combo, self.org_gnome_desktop_interface, "icon-theme")
		self.btn_curs.connect("changed", self.action_combo, self.org_gnome_desktop_interface, "cursor-theme")
		self.btn_fontr.connect("clicked", self.action_font_reset)
		self.btn_font.connect("font-set", self.action_font, self.org_gnome_desktop_interface, "font-name")
		self.btn_anim.connect("state-set", self.action_switch, self.org_gnome_desktop_interface, "enable-animations")
		self.btn_weekn.connect("state-set", self.action_switch, self.org_gnome_desktop_calendar, "show-weekdate")
		self.btn_weekd.connect("state-set", self.action_switch, self.org_gnome_desktop_interface, "clock-show-weekday")
		self.btn_date.connect("state-set", self.action_switch, self.org_gnome_desktop_interface, "clock-show-date")
		self.btn_sec.connect("state-set", self.action_switch, self.org_gnome_desktop_interface, "clock-show-seconds")
		self.btn_bat.connect("state-set", self.action_switch, self.org_gnome_desktop_interface, "show-battery-percentage")
		self.btn_vol.connect("state-set", self.action_switch, self.org_gnome_desktop_sound, "allow-volume-above-100-percent")
		self.btn_hot.connect("state-set", self.action_switch, self.org_gnome_desktop_interface, "enable-hot-corners")
		self.btn_work.connect("value-changed", self.action_workspaces)
		self.btn_span.connect("state-set", self.action_switch, self.org_gnome_mutter, "workspaces-only-on-primary")

		self.box_gnome.pack_start(Gtk.Label(label = "Gnome Shell theme"), False, False, 0)
		self.box_gtk.pack_start(Gtk.Label(label = "GTK theme"), False, False, 0)
		self.box_icons.pack_start(Gtk.Label(label = "Icons theme"), False, False, 0)
		self.box_curs.pack_start(Gtk.Label(label = "Cursor theme"), False, False, 0)
		self.box_font.pack_start(Gtk.Label(label = "System font"), False, False, 0)
		self.box_anim.pack_start(Gtk.Label(label = "Desktop animations"), False, False, 0)
		self.box_weekn.pack_start(Gtk.Label(label = "Show week number"), False, False, 0)
		self.box_weekd.pack_start(Gtk.Label(label = "Show weekday in the clock"), False, False, 0)
		self.box_date.pack_start(Gtk.Label(label = "Show date in the clock"), False, False, 0)
		self.box_sec.pack_start(Gtk.Label(label = "Show seconds in the clock"), False, False, 0)
		self.box_bat.pack_start(Gtk.Label(label = "Show battery percentage"), False, False, 0)
		self.box_vol.pack_start(Gtk.Label(label = "Allow volume amplification"), False, False, 0)
		self.box_hot.pack_start(Gtk.Label(label = "Place the cursor at the top-left corner to open overview"), False, False, 0)
		self.box_work.pack_start(Gtk.Label(label = "Fixed number of workspaces (0 for dynamic workspaces)"), False, False, 0)
		self.box_span.pack_start(Gtk.Label(label = "Allow only one workspace on external monitors"), False, False, 0)

		self.box_gnome.pack_end(self.btn_gnome, False, False, 0)
		self.box_gtk.pack_end(self.btn_gtk, False, False, 0)
		self.box_icons.pack_end(self.btn_icons, False, False, 0)
		self.box_curs.pack_end(self.btn_curs, False, False, 0)
		self.box_font.pack_end(self.btn_fontr, False, False, 0)
		self.box_font.pack_end(self.btn_font, False, False, 0)
		self.box_anim.pack_end(self.btn_anim, False, False, 0)
		self.box_weekn.pack_end(self.btn_weekn, False, False, 0)
		self.box_weekd.pack_end(self.btn_weekd, False, False, 0)
		self.box_date.pack_end(self.btn_date, False, False, 0)
		self.box_sec.pack_end(self.btn_sec, False, False, 0)
		self.box_bat.pack_end(self.btn_bat, False, False, 0)
		self.box_vol.pack_end(self.btn_vol, False, False, 0)
		self.box_hot.pack_end(self.btn_hot, False, False, 0)
		self.box_work.pack_end(self.btn_work, False, False, 0)
		self.box_span.pack_end(self.btn_span, False, False, 0)

		self.box1.pack_start(self.box_gnome, False, False, 0)
		self.box1.pack_start(self.box_gtk, False, False, 0)
		self.box1.pack_start(self.box_icons, False, False, 0)
		self.box1.pack_start(self.box_curs, False, False, 0)
		self.box1.pack_start(self.box_font, False, False, 0)
		self.box1.pack_start(self.box_anim, False, False, 0)
		self.box2.pack_start(self.box_weekn, False, False, 0)
		self.box2.pack_start(self.box_weekd, False, False, 0)
		self.box2.pack_start(self.box_date, False, False, 0)
		self.box2.pack_start(self.box_sec, False, False, 0)
		self.box2.pack_start(self.box_bat, False, False, 0)
		self.box2.pack_start(self.box_vol, False, False, 0)
		self.box3.pack_start(self.box_hot, False, False, 0)
		self.box3.pack_start(self.box_work, False, False, 0)
		self.box3.pack_start(self.box_span, False, False, 0)


	def action_switch(self, widget, state, schema, key):
		schema.set_boolean(key, state)

	def action_combo(self, widget, schema, key):
		schema.set_string(key, widget.get_active_text())

	def action_font(self, widget, schema, key):
		schema.set_string(key, widget.get_font())

	def action_gnome(self, widget):
		dialog = Gtk.Dialog(title = "Information", use_header_bar = True, transient_for = win, resizable = False)
		box = dialog.get_content_area()
		box.set_spacing(10)
		box.set_margin_top(10)
		box.set_margin_bottom(10)
		box.set_margin_start(10)
		box.set_margin_end(10)
		box.pack_start(Gtk.Label(label = "<b>Change the Gnome Shell theme from the login screen</b>\n<i>In case of crash or bug, return to the default 'Gnome' session.</i>", use_markup = True, xalign = 0), False, False, 0)
		box.pack_start(Gtk.Image(file = "/usr/share/gnome-customization/session.png"), False, False, 0)
		dialog.show_all()
		dialog.run()
		dialog.destroy()

	def action_font_reset(self, widget):
		self.org_gnome_desktop_interface.reset("font-name")
		self.btn_font.set_font(self.org_gnome_desktop_interface.get_string("font-name"))

	def action_workspaces(self, widget):
		num = widget.get_value()
		if num:
			self.org_gnome_mutter.set_boolean("dynamic-workspaces", False)
			self.org_gnome_desktop_wm_preferences.set_int("num-workspaces", num)
		else:
			self.org_gnome_mutter.set_boolean("dynamic-workspaces", True)
			self.org_gnome_desktop_wm_preferences.reset("num-workspaces")



class LoginScreenTab(Gtk.Box):
	def __init__(self):
		self.gsettings = []
		self.gsettings += self.getkeyr("org.gnome.desktop.interface")
		self.gsettings += self.getkeyr("org.gnome.login-screen")
		self.gsettings += self.getkey("org.gnome.desktop.calendar", "show-weekdate")
		self.gsettings += self.getkey("org.gnome.desktop.sound", "allow-volume-above-100-percent")
		self.theme_gnome = readlink("/etc/alternatives/gdm3-theme.gresource")
		if self.theme_gnome == "/usr/share/gnome-shell/gnome-shell-theme.gresource":
			self.theme_gnome = ""
		else:
			self.theme_gnome = self.theme_gnome.split("/")[-1][0:-10]
		self.theme_gtk    = self.getstr("org.gnome.desktop.interface", "gtk-theme")
		self.theme_icons  = self.getstr("org.gnome.desktop.interface", "icon-theme")
		self.theme_curs   = self.getstr("org.gnome.desktop.interface", "cursor-theme")
		self.themes_gtk   = ["Adwaita"]
		self.themes_icons = ["Adwaita"]
		self.themes_curs  = ["Adwaita"]
		for path in ["/usr/share/themes/", "/usr/local/share/themes/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_gtk and not theme == "HighContrast" and not theme == "HighContrastInverse":
						self.themes_gtk.append(theme)
		for path in ["/usr/share/icons/", "/usr/local/share/icons/"]:
			if exists(path):
				for theme in listdir(path):
					if exists(path + theme + "/index.theme") and not theme in self.themes_icons and not theme == "HighContrast" and not theme == "HighContrastInverse" \
					and not theme == "default" and not theme == "gnome" and not theme == "hicolor" and not theme == "locolor":
						self.themes_icons.append(theme)
					if exists(path + theme + "/cursor.theme") and not theme in self.themes_curs:
						self.themes_curs.append(theme)
		self.themes_gtk.sort()
		self.themes_icons.sort()
		self.themes_curs.sort()

		self.admin = None
		self.name = "Login screen"
		self.header = Gtk.HeaderBar()
		self.header_popover = Gtk.Popover()
		label = Gtk.Label(label = "To add a Gnome, GTK, icons or cursors theme, install it with your package\nmanager or manually browse, download and install it from <a href='https://gnome-look.org'>gnome-look.org</a>.\n\nValid paths to place Gnome and GTK themes are:\n - <tt><a href='file:///usr/share/themes'>/usr/share/themes</a></tt>\n\nValid paths to place icons and cursors themes are:\n - <tt><a href='file:///usr/share/icons'>/usr/share/icons</a></tt>", use_markup = True, margin = 20)
		label.show_all()
		self.header_popover.add(label)
		self.header_info = Gtk.MenuButton(image = Gtk.Image(icon_name = "dialog-information-symbolic"), popover = self.header_popover)
		self.header_unlock = Gtk.Button(image = Gtk.Image(icon_name = "system-lock-screen-symbolic"))
		self.header_unlock.connect("clicked", self.unlock)
		self.header.pack_start(self.header_info)
		self.header.pack_end(self.header_unlock)
		Gtk.Box.__init__(self, margin = 20, spacing = 20)
		self.box = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL, sensitive = False)
		self.pack_start(self.box, True, True, 0)

		self.box0 = Gtk.Box(spacing = 20)
		self.box1 = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box2 = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box3 = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.box0.pack_start(self.box1, True, True, 0)
		self.box0.pack_start(Gtk.Separator(), False, False, 0)
		self.box0.pack_start(self.box2, True, True, 0)
		self.box.pack_start(self.box0, False, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(self.box3, False, False, 0)

		self.box_gnome = Gtk.Box(spacing = 10)
		self.box_gtk   = Gtk.Box(spacing = 10)
		self.box_icons = Gtk.Box(spacing = 10)
		self.box_curs  = Gtk.Box(spacing = 10)
		self.box_font  = Gtk.Box(spacing = 10)
		self.box_anim  = Gtk.Box(spacing = 10)
		self.box_weekn = Gtk.Box(spacing = 10)
		self.box_weekd = Gtk.Box(spacing = 10)
		self.box_date  = Gtk.Box(spacing = 10)
		self.box_sec   = Gtk.Box(spacing = 10)
		self.box_bat   = Gtk.Box(spacing = 10)
		self.box_vol   = Gtk.Box(spacing = 10)
		self.box_list  = Gtk.Box(spacing = 10)
		self.box_fail  = Gtk.Box(spacing = 10)
		self.box_logo  = Gtk.Box(spacing = 10)

		self.btn_gnome = Gtk.Button(label = self.theme_gnome or "(Default)")
		self.btn_gtk   = Gtk.ComboBoxText(width_request = 200)
		self.btn_icons = Gtk.ComboBoxText(width_request = 200)
		self.btn_curs  = Gtk.ComboBoxText(width_request = 200)
		self.btn_fontr = Gtk.Button(image = Gtk.Image(icon_name = "edit-undo-symbolic"))
		self.btn_font  = Gtk.FontButton(font = self.getstr("org.gnome.desktop.interface", "font-name"))
		self.btn_anim  = Gtk.Switch(state = self.getbool("org.gnome.desktop.interface", "enable-animations"))
		self.btn_weekn = Gtk.Switch(state = self.getbool("org.gnome.desktop.calendar", "show-weekdate"))
		self.btn_weekd = Gtk.Switch(state = self.getbool("org.gnome.desktop.interface", "clock-show-weekday"))
		self.btn_date  = Gtk.Switch(state = self.getbool("org.gnome.desktop.interface", "clock-show-date"))
		self.btn_sec   = Gtk.Switch(state = self.getbool("org.gnome.desktop.interface", "clock-show-seconds"))
		self.btn_bat   = Gtk.Switch(state = self.getbool("org.gnome.desktop.interface", "show-battery-percentage"))
		self.btn_vol   = Gtk.Switch(state = self.getbool("org.gnome.desktop.sound", "allow-volume-above-100-percent"))
		self.btn_list  = Gtk.Switch(state = self.getbool("org.gnome.login-screen", "disable-user-list"))
		self.btn_fail  = Gtk.SpinButton()
		self.btn_logor = Gtk.Button(image = Gtk.Image(icon_name = "edit-undo-symbolic"))
		self.btn_logod = Gtk.Button(image = Gtk.Image(icon_name = "edit-delete-symbolic"))
		self.btn_logo  = Gtk.FileChooserButton()

		for theme in self.themes_gtk:
			self.btn_gtk.append_text(theme)
		for theme in self.themes_icons:
			self.btn_icons.append_text(theme)
		for theme in self.themes_curs:
			self.btn_curs.append_text(theme)
		if self.theme_gtk in self.themes_gtk:
			self.btn_gtk.set_active(self.themes_gtk.index(self.theme_gtk))
		if self.theme_icons in self.themes_icons:
			self.btn_icons.set_active(self.themes_icons.index(self.theme_icons))
		if self.theme_curs in self.themes_curs:
			self.btn_curs.set_active(self.themes_curs.index(self.theme_curs))
		self.btn_fail.set_range(1, 100)
		self.btn_fail.set_increments(1, 1)
		self.btn_fail.set_value(self.getint("org.gnome.login-screen", "allowed-failures"))
		types = Gtk.FileFilter()
		types.add_mime_type("image/png")
		types.add_mime_type("image/jpeg")
		self.btn_logo.set_filter(types)
		self.btn_logo.set_local_only(True)
		self.btn_logo.set_uri("file://" + self.getstr("org.gnome.login-screen", "logo"))

		self.btn_gnome.connect("clicked", self.action_gnome)
		self.btn_gtk.connect("changed", self.action_combo, "org.gnome.desktop.interface", "gtk-theme")
		self.btn_icons.connect("changed", self.action_combo, "org.gnome.desktop.interface", "icon-theme")
		self.btn_curs.connect("changed", self.action_combo, "org.gnome.desktop.interface", "cursor-theme")
		self.btn_fontr.connect("clicked", self.action_font_reset)
		self.btn_font.connect("font-set", self.action_font, "org.gnome.desktop.interface", "font-name")
		self.btn_anim.connect("state-set", self.action_switch, "org.gnome.desktop.interface", "enable-animations")
		self.btn_weekn.connect("state-set", self.action_switch, "org.gnome.desktop.calendar", "show-weekdate")
		self.btn_weekd.connect("state-set", self.action_switch, "org.gnome.desktop.interface", "clock-show-weekday")
		self.btn_date.connect("state-set", self.action_switch, "org.gnome.desktop.interface", "clock-show-date")
		self.btn_sec.connect("state-set", self.action_switch, "org.gnome.desktop.interface", "clock-show-seconds")
		self.btn_bat.connect("state-set", self.action_switch, "org.gnome.desktop.interface", "show-battery-percentage")
		self.btn_vol.connect("state-set", self.action_switch, "org.gnome.desktop.sound", "allow-volume-above-100-percent")
		self.btn_list.connect("state-set", self.action_switch, "org.gnome.login-screen", "disable-user-list")
		self.btn_fail.connect("value-changed", self.action_spin, "org.gnome.login-screen", "allowed-failures")
		self.btn_logor.connect("clicked", self.action_logo_reset)
		self.btn_logod.connect("clicked", self.action_logo_remove)
		self.btn_logo.connect("file-set", self.action_file, "org.gnome.login-screen", "logo")

		self.box_gnome.pack_start(Gtk.Label(label = "Gnome Shell theme"), False, False, 0)
		self.box_gtk.pack_start(Gtk.Label(label = "GTK theme"), False, False, 0)
		self.box_icons.pack_start(Gtk.Label(label = "Icons theme"), False, False, 0)
		self.box_curs.pack_start(Gtk.Label(label = "Cursor theme"), False, False, 0)
		self.box_font.pack_start(Gtk.Label(label = "System font"), False, False, 0)
		self.box_anim.pack_start(Gtk.Label(label = "Desktop animations"), False, False, 0)
		self.box_weekn.pack_start(Gtk.Label(label = "Show week number"), False, False, 0)
		self.box_weekd.pack_start(Gtk.Label(label = "Show weekday in the clock"), False, False, 0)
		self.box_date.pack_start(Gtk.Label(label = "Show date in the clock"), False, False, 0)
		self.box_sec.pack_start(Gtk.Label(label = "Show seconds in the clock"), False, False, 0)
		self.box_bat.pack_start(Gtk.Label(label = "Show battery percentage"), False, False, 0)
		self.box_vol.pack_start(Gtk.Label(label = "Allow volume amplification"), False, False, 0)
		self.box_list.pack_start(Gtk.Label(label = "Disable user list, forcing username and password authentification"), False, False, 0)
		self.box_fail.pack_start(Gtk.Label(label = "Allowed password failures before going back to user selection"), False, False, 0)
		self.box_logo.pack_start(Gtk.Label(label = "Bottom watermark image"), False, False, 0)

		self.box_gnome.pack_end(self.btn_gnome, False, False, 0)
		self.box_gtk.pack_end(self.btn_gtk, False, False, 0)
		self.box_icons.pack_end(self.btn_icons, False, False, 0)
		self.box_curs.pack_end(self.btn_curs, False, False, 0)
		self.box_font.pack_end(self.btn_fontr, False, False, 0)
		self.box_font.pack_end(self.btn_font, False, False, 0)
		self.box_anim.pack_end(self.btn_anim, False, False, 0)
		self.box_weekn.pack_end(self.btn_weekn, False, False, 0)
		self.box_weekd.pack_end(self.btn_weekd, False, False, 0)
		self.box_date.pack_end(self.btn_date, False, False, 0)
		self.box_sec.pack_end(self.btn_sec, False, False, 0)
		self.box_bat.pack_end(self.btn_bat, False, False, 0)
		self.box_vol.pack_end(self.btn_vol, False, False, 0)
		self.box_list.pack_end(self.btn_list, False, False, 0)
		self.box_fail.pack_end(self.btn_fail, False, False, 0)
		self.box_logo.pack_end(self.btn_logor, False, False, 0)
		self.box_logo.pack_end(self.btn_logod, False, False, 0)
		self.box_logo.pack_end(self.btn_logo, False, False, 0)

		self.box1.pack_start(self.box_gnome, False, False, 0)
		self.box1.pack_start(self.box_gtk, False, False, 0)
		self.box1.pack_start(self.box_icons, False, False, 0)
		self.box1.pack_start(self.box_curs, False, False, 0)
		self.box1.pack_start(self.box_font, False, False, 0)
		self.box1.pack_start(self.box_anim, False, False, 0)
		self.box2.pack_start(self.box_weekn, False, False, 0)
		self.box2.pack_start(self.box_weekd, False, False, 0)
		self.box2.pack_start(self.box_date, False, False, 0)
		self.box2.pack_start(self.box_sec, False, False, 0)
		self.box2.pack_start(self.box_bat, False, False, 0)
		self.box2.pack_start(self.box_vol, False, False, 0)
		self.box3.pack_start(self.box_list, False, False, 0)
		self.box3.pack_start(self.box_fail, False, False, 0)
		self.box3.pack_start(self.box_logo, False, False, 0)


	def unlock(self, widget):
		self.admin = get_admin()
		if self.admin:
			self.header_unlock.set_sensitive(False)
			self.box.set_sensitive(True)

	def getkey(self, schema, key):
		value = runu("env HOME=/var/lib/gdm3/ gsettings get " + schema + " " + key)[:-2]
		return [[schema, key, value]]

	def getkeyr(self, schema):
		table = runu("env HOME=/var/lib/gdm3/ gsettings list-recursively " + schema).split("\n")
		array = []
		for line in table:
			if line:
				split  = line.split(" ")
				schema = split[0]
				key    = split[1]
				value  = ""
				for index in range(2, len(split)):
					value += split[index] + " "
				value = value[:-2]
				array.append([schema, key, value])
		return array

	def getbool(self, schema, key):
		for gsetting in self.gsettings:
			if gsetting[0] == schema and gsetting[1] == key:
				if gsetting[2] == "true":
					return True
				else:
					return False

	def getint(self, schema, key):
		for gsetting in self.gsettings:
			if gsetting[0] == schema and gsetting[1] == key:
				return int(gsetting[2])

	def getstr(self, schema, key):
		for gsetting in self.gsettings:
			if gsetting[0] == schema and gsetting[1] == key:
				return gsetting[2][1:-1]


	def action_switch(self, widget, state, schema, key):
		if state:
			value = "true"
		else:
			value = "false"
		self.admin.sendline("sudo -u gdm dbus-launch gsettings set " + schema + " " + key + " " + value)
		self.admin.expect("#")

	def action_spin(self, widget, schema, key):
		value = str(int(widget.get_value()))
		self.admin.sendline("sudo -u gdm dbus-launch gsettings set " + schema + " " + key + " " + value)
		self.admin.expect("#")

	def action_combo(self, widget, schema, key):
		value = "'" + widget.get_active_text() + "'"
		self.admin.sendline("sudo -u gdm dbus-launch gsettings set " + schema + " " + key + " '" + value + "'")
		self.admin.expect("#")

	def action_file(self, widget, schema, key):
		value = widget.get_uri()[7:]
		self.admin.sendline("sudo -u gdm dbus-launch gsettings set " + schema + " " + key + " '" + value + "'")
		self.admin.expect("#")

	def action_font(self, widget, schema, key):
		value = "'" + widget.get_font() + "'"
		self.admin.sendline("sudo -u gdm dbus-launch gsettings set " + schema + " " + key + " '" + value + "'")
		self.admin.expect("#")

	def action_gnome(self, widget):
		themes = []
		for theme in listdir("/usr/share/gnome-shell/themes/"):
			themes.append(theme[:-10])
		themes.sort()
		dialog = Gtk.Dialog(title = "Select a theme", use_header_bar = True, transient_for = win, resizable = False)
		dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_APPLY, Gtk.ResponseType.APPLY)
		box = dialog.get_content_area()
		box.set_spacing(10)
		box.set_margin_top(10)
		box.set_margin_bottom(10)
		box.set_margin_start(10)
		box.set_margin_end(10)
		warning = Gtk.Box(spacing = 10)
		warning.pack_start(Gtk.Image(icon_name = "dialog-warning-symbolic", icon_size = 6), True, True, 0)
		warning.pack_end(Gtk.Label(label = "<b>This tool can be dangerous!</b>\nIf you select an incompatible theme,\nyou might not be able to login anymore!\nIn this situation you should know how to\nswitch to another TTY and run 'gdm3-reset'.", use_markup = True), True, True, 0)
		box.pack_start(warning, False, False, 0)
		scroll = Gtk.ScrolledWindow(min_content_width = 300, max_content_width = 300, min_content_height = 300, max_content_height = 300)
		listbox = Gtk.ListBox()
		row = Gtk.ListBoxRow()
		row.add(Gtk.Label(label = "<i>(Default)</i>", use_markup = True, xalign = 0.0, margin = 10))
		listbox.insert(row, -1)
		for theme in themes:
			row = Gtk.ListBoxRow()
			row.add(Gtk.Label(label = theme, xalign = 0.0, margin = 10))
			listbox.insert(row, -1)
		if self.theme_gnome in themes:
			listbox.select_row(listbox.get_row_at_index(themes.index(self.theme_gnome)+1))
		scroll.add(listbox)
		box.pack_start(scroll, False, False, 0)
		dialog.show_all()
		response = dialog.run()
		if response == Gtk.ResponseType.APPLY:
			for theme in themes:
				self.admin.sendline("update-alternatives --remove gdm3-theme.gresource '/usr/share/gnome-shell/themes/" + theme + ".gresource'")
				self.admin.expect("#")
			self.theme_gnome = ""
			self.btn_gnome.set_label("(Default)")
			row = listbox.get_selected_row()
			if row.get_index():
				self.admin.sendline("update-alternatives --install '/usr/share/gnome-shell/gdm3-theme.gresource' gdm3-theme.gresource '/usr/share/gnome-shell/themes/" + row.get_child().get_label() + ".gresource' 1000")
				self.admin.expect("#")
				self.theme_gnome = row.get_child().get_label()
				self.btn_gnome.set_label(row.get_child().get_label())
		dialog.destroy()

	def action_font_reset(self, widget):
		self.admin.sendline("sudo -u gdm dbus-launch gsettings reset org.gnome.desktop.interface font-name")
		self.admin.expect("#")
		self.btn_font.set_font(runu("env HOME=/var/lib/gdm3/ gsettings get org.gnome.desktop.interface font-name")[1:-3])

	def action_logo_reset(self, widget):
		self.admin.sendline("sudo -u gdm dbus-launch gsettings reset org.gnome.login-screen logo")
		self.admin.expect("#")
		self.btn_logo.set_uri("file://" + runu("env HOME=/var/lib/gdm3/ gsettings get org.gnome.login-screen logo")[1:-3])

	def action_logo_remove(self, widget):
		self.admin.sendline("sudo -u gdm dbus-launch gsettings set org.gnome.login-screen logo ''")
		self.admin.expect("#")
		self.btn_logo.set_uri("")



class MoreTab(Gtk.Box):
	def __init__(self):
		self.name = "More"
		self.header = Gtk.HeaderBar()
		Gtk.Box.__init__(self, margin = 20, spacing = 20)
		self.box = Gtk.Box(spacing = 20, orientation = Gtk.Orientation.VERTICAL)
		self.pack_start(self.box, True, False, 0)

		self.apps   = Gtk.Button(label = "Manage applications grid")
		self.webapp = Gtk.Button(label = "Manage Web applications")
		self.start  = Gtk.Button(label = "Manage startup programs")
		self.gnome  = Gtk.Button(label = "Manage Gnome Shell themes")
		self.qt5ct  = Gtk.Button(label = "Qt5 applications appearance")
		self.apps.connect("clicked", self.launch, "menulibre")
		self.webapp.connect("clicked", self.launch, "if ! command webapp-manager; then notify-send -i applications-internet 'Please install the \"webapp-manager\" package' 'Linux Mint must be upgraded to 20.1 minimum'; fi")
		self.start.connect("clicked", self.launch, "gnome-session-properties")
		self.gnome.connect("clicked", self.launch, "gnome-theming")
		self.qt5ct.connect("clicked", self.launch, "notify-send -i qt5ct 'Please wait...' 'Qt5 Configuration Tool is starting'; qt5ct")
		self.box.pack_start(self.apps, False, False, 0)
		self.box.pack_start(self.webapp, False, False, 0)
		self.box.pack_start(self.start, False, False, 0)
		self.box.pack_start(self.gnome, False, False, 0)
		self.box.pack_start(self.qt5ct, False, False, 0)
		self.box.pack_start(Gtk.Separator(), False, False, 0)
		self.box.pack_start(Gtk.Label(label = "<i>Check Linux Mint Gnome development progress\nor report a bug on the <a href='https://github.com/pl453s/linux-mint-gnome'>GitHub project page</a>.</i>", use_markup = True), False, False, 0)


	def launch(self, widget, command):
		system(command + " &")



admin = None
def get_admin():
	global admin
	if not admin:
		admin = spawnu("pkexec bash")
		admin.expect([EOF, "#"])
		if not admin.isalive():
			admin = None
	return admin
win = MainWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
if admin:
	admin.sendline("exit")
	admin.expect(EOF)
